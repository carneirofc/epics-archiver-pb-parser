// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epics_event.proto

#include "epics_event.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace EPICS {
constexpr FieldValue::FieldValue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct FieldValueDefaultTypeInternal {
  constexpr FieldValueDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FieldValueDefaultTypeInternal() {}
  union {
    FieldValue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FieldValueDefaultTypeInternal _FieldValue_default_instance_;
constexpr ScalarString::ScalarString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct ScalarStringDefaultTypeInternal {
  constexpr ScalarStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarStringDefaultTypeInternal() {}
  union {
    ScalarString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarStringDefaultTypeInternal _ScalarString_default_instance_;
constexpr ScalarByte::ScalarByte(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct ScalarByteDefaultTypeInternal {
  constexpr ScalarByteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarByteDefaultTypeInternal() {}
  union {
    ScalarByte _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarByteDefaultTypeInternal _ScalarByte_default_instance_;
constexpr ScalarShort::ScalarShort(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , val_(0)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct ScalarShortDefaultTypeInternal {
  constexpr ScalarShortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarShortDefaultTypeInternal() {}
  union {
    ScalarShort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarShortDefaultTypeInternal _ScalarShort_default_instance_;
constexpr ScalarInt::ScalarInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , val_(0)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct ScalarIntDefaultTypeInternal {
  constexpr ScalarIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarIntDefaultTypeInternal() {}
  union {
    ScalarInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarIntDefaultTypeInternal _ScalarInt_default_instance_;
constexpr ScalarEnum::ScalarEnum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , val_(0)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct ScalarEnumDefaultTypeInternal {
  constexpr ScalarEnumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarEnumDefaultTypeInternal() {}
  union {
    ScalarEnum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarEnumDefaultTypeInternal _ScalarEnum_default_instance_;
constexpr ScalarFloat::ScalarFloat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , val_(0)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct ScalarFloatDefaultTypeInternal {
  constexpr ScalarFloatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarFloatDefaultTypeInternal() {}
  union {
    ScalarFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarFloatDefaultTypeInternal _ScalarFloat_default_instance_;
constexpr ScalarDouble::ScalarDouble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , val_(0)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct ScalarDoubleDefaultTypeInternal {
  constexpr ScalarDoubleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalarDoubleDefaultTypeInternal() {}
  union {
    ScalarDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalarDoubleDefaultTypeInternal _ScalarDouble_default_instance_;
constexpr VectorString::VectorString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_()
  , fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct VectorStringDefaultTypeInternal {
  constexpr VectorStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorStringDefaultTypeInternal() {}
  union {
    VectorString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorStringDefaultTypeInternal _VectorString_default_instance_;
constexpr VectorChar::VectorChar(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct VectorCharDefaultTypeInternal {
  constexpr VectorCharDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorCharDefaultTypeInternal() {}
  union {
    VectorChar _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorCharDefaultTypeInternal _VectorChar_default_instance_;
constexpr VectorShort::VectorShort(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_()
  , _val_cached_byte_size_()
  , fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct VectorShortDefaultTypeInternal {
  constexpr VectorShortDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorShortDefaultTypeInternal() {}
  union {
    VectorShort _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorShortDefaultTypeInternal _VectorShort_default_instance_;
constexpr VectorInt::VectorInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_()
  , fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct VectorIntDefaultTypeInternal {
  constexpr VectorIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorIntDefaultTypeInternal() {}
  union {
    VectorInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorIntDefaultTypeInternal _VectorInt_default_instance_;
constexpr VectorEnum::VectorEnum(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_()
  , _val_cached_byte_size_()
  , fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct VectorEnumDefaultTypeInternal {
  constexpr VectorEnumDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorEnumDefaultTypeInternal() {}
  union {
    VectorEnum _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorEnumDefaultTypeInternal _VectorEnum_default_instance_;
constexpr VectorFloat::VectorFloat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_()
  , fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct VectorFloatDefaultTypeInternal {
  constexpr VectorFloatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorFloatDefaultTypeInternal() {}
  union {
    VectorFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorFloatDefaultTypeInternal _VectorFloat_default_instance_;
constexpr VectorDouble::VectorDouble(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : val_()
  , fieldvalues_()
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false){}
struct VectorDoubleDefaultTypeInternal {
  constexpr VectorDoubleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~VectorDoubleDefaultTypeInternal() {}
  union {
    VectorDouble _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT VectorDoubleDefaultTypeInternal _VectorDouble_default_instance_;
constexpr V4GenericBytes::V4GenericBytes(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : fieldvalues_()
  , val_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , secondsintoyear_(0u)
  , nano_(0u)
  , severity_(0)
  , status_(0)
  , repeatcount_(0u)
  , fieldactualchange_(false)
  , usertag_(0u){}
struct V4GenericBytesDefaultTypeInternal {
  constexpr V4GenericBytesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~V4GenericBytesDefaultTypeInternal() {}
  union {
    V4GenericBytes _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT V4GenericBytesDefaultTypeInternal _V4GenericBytes_default_instance_;
constexpr PayloadInfo::PayloadInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_()
  , pvname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , unused09_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , year_(0)
  , unused00_(0)
  , unused01_(0)
  , unused02_(0)
  , unused03_(0)
  , unused04_(0)
  , unused05_(0)
  , unused06_(0)
  , unused07_(0)
  , unused08_(0)
  , elementcount_(0){}
struct PayloadInfoDefaultTypeInternal {
  constexpr PayloadInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PayloadInfoDefaultTypeInternal() {}
  union {
    PayloadInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PayloadInfoDefaultTypeInternal _PayloadInfo_default_instance_;
}  // namespace EPICS
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_epics_5fevent_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_epics_5fevent_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_epics_5fevent_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_epics_5fevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::EPICS::FieldValue, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::FieldValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::FieldValue, name_),
  PROTOBUF_FIELD_OFFSET(::EPICS::FieldValue, val_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarString, fieldactualchange_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarByte, fieldactualchange_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarShort, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarInt, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarEnum, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarFloat, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::ScalarDouble, fieldactualchange_),
  0,
  1,
  2,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorString, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorChar, fieldactualchange_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorShort, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorInt, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorEnum, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorFloat, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::VectorDouble, fieldactualchange_),
  0,
  1,
  ~0u,
  2,
  3,
  4,
  ~0u,
  5,
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, secondsintoyear_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, nano_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, val_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, severity_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, status_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, repeatcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, fieldvalues_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, fieldactualchange_),
  PROTOBUF_FIELD_OFFSET(::EPICS::V4GenericBytes, usertag_),
  1,
  2,
  0,
  3,
  4,
  5,
  ~0u,
  6,
  7,
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, type_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, pvname_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, year_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, elementcount_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused00_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused01_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused02_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused03_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused04_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused05_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused06_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused07_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused08_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, unused09_),
  PROTOBUF_FIELD_OFFSET(::EPICS::PayloadInfo, headers_),
  2,
  0,
  3,
  13,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  1,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::EPICS::FieldValue)},
  { 9, 22, sizeof(::EPICS::ScalarString)},
  { 30, 43, sizeof(::EPICS::ScalarByte)},
  { 51, 64, sizeof(::EPICS::ScalarShort)},
  { 72, 85, sizeof(::EPICS::ScalarInt)},
  { 93, 106, sizeof(::EPICS::ScalarEnum)},
  { 114, 127, sizeof(::EPICS::ScalarFloat)},
  { 135, 148, sizeof(::EPICS::ScalarDouble)},
  { 156, 169, sizeof(::EPICS::VectorString)},
  { 177, 190, sizeof(::EPICS::VectorChar)},
  { 198, 211, sizeof(::EPICS::VectorShort)},
  { 219, 232, sizeof(::EPICS::VectorInt)},
  { 240, 253, sizeof(::EPICS::VectorEnum)},
  { 261, 274, sizeof(::EPICS::VectorFloat)},
  { 282, 295, sizeof(::EPICS::VectorDouble)},
  { 303, 317, sizeof(::EPICS::V4GenericBytes)},
  { 326, 346, sizeof(::EPICS::PayloadInfo)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_FieldValue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_ScalarString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_ScalarByte_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_ScalarShort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_ScalarInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_ScalarEnum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_ScalarFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_ScalarDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_VectorString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_VectorChar_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_VectorShort_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_VectorInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_VectorEnum_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_VectorFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_VectorDouble_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_V4GenericBytes_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::EPICS::_PayloadInfo_default_instance_),
};

const char descriptor_table_protodef_epics_5fevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021epics_event.proto\022\005EPICS\"\'\n\nFieldValue"
  "\022\014\n\004name\030\001 \002(\t\022\013\n\003val\030\002 \002(\t\"\302\001\n\014ScalarSt"
  "ring\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 "
  "\002(\r\022\013\n\003val\030\003 \002(\t\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n"
  "\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n"
  "\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n"
  "\021fieldactualchange\030\010 \001(\010\"\300\001\n\nScalarByte\022"
  "\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013"
  "\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006stat"
  "us\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fiel"
  "dvalues\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n\021fiel"
  "dactualchange\030\010 \001(\010\"\301\001\n\013ScalarShort\022\027\n\017s"
  "econdsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003va"
  "l\030\003 \002(\021\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006status\030\005"
  " \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fieldval"
  "ues\030\007 \003(\0132\021.EPICS.FieldValue\022\031\n\021fieldact"
  "ualchange\030\010 \001(\010\"\277\001\n\tScalarInt\022\027\n\017seconds"
  "intoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002("
  "\017\022\023\n\010severity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\001"
  "0\022\023\n\013repeatcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 "
  "\003(\0132\021.EPICS.FieldValue\022\031\n\021fieldactualcha"
  "nge\030\010 \001(\010\"\300\001\n\nScalarEnum\022\027\n\017secondsintoy"
  "ear\030\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\021\022\023\n\010"
  "severity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013"
  "repeatcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021"
  ".EPICS.FieldValue\022\031\n\021fieldactualchange\030\010"
  " \001(\010\"\301\001\n\013ScalarFloat\022\027\n\017secondsintoyear\030"
  "\001 \002(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\002\022\023\n\010seve"
  "rity\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repe"
  "atcount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPI"
  "CS.FieldValue\022\031\n\021fieldactualchange\030\010 \001(\010"
  "\"\302\001\n\014ScalarDouble\022\027\n\017secondsintoyear\030\001 \002"
  "(\r\022\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \002(\001\022\023\n\010severit"
  "y\030\004 \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatc"
  "ount\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS."
  "FieldValue\022\031\n\021fieldactualchange\030\010 \001(\010\"\302\001"
  "\n\014VectorString\022\027\n\017secondsintoyear\030\001 \002(\r\022"
  "\014\n\004nano\030\002 \002(\r\022\013\n\003val\030\003 \003(\t\022\023\n\010severity\030\004"
  " \001(\005:\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcoun"
  "t\030\006 \001(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.Fie"
  "ldValue\022\031\n\021fieldactualchange\030\010 \001(\010\"\300\001\n\nV"
  "ectorChar\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004na"
  "no\030\002 \002(\r\022\013\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:"
  "\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001"
  "(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldVal"
  "ue\022\031\n\021fieldactualchange\030\010 \001(\010\"\305\001\n\013Vector"
  "Short\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002"
  " \002(\r\022\017\n\003val\030\003 \003(\021B\002\020\001\022\023\n\010severity\030\004 \001(\005:"
  "\0010\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001"
  "(\r\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldVal"
  "ue\022\031\n\021fieldactualchange\030\010 \001(\010\"\303\001\n\tVector"
  "Int\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002"
  "(\r\022\017\n\003val\030\003 \003(\017B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010"
  "\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r"
  "\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue"
  "\022\031\n\021fieldactualchange\030\010 \001(\010\"\304\001\n\nVectorEn"
  "um\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002("
  "\r\022\017\n\003val\030\003 \003(\021B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022"
  "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
  "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
  "\031\n\021fieldactualchange\030\010 \001(\010\"\305\001\n\013VectorFlo"
  "at\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002("
  "\r\022\017\n\003val\030\003 \003(\002B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010\022"
  "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
  "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
  "\031\n\021fieldactualchange\030\010 \001(\010\"\306\001\n\014VectorDou"
  "ble\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030\002 \002"
  "(\r\022\017\n\003val\030\003 \003(\001B\002\020\001\022\023\n\010severity\030\004 \001(\005:\0010"
  "\022\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r"
  "\022&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue"
  "\022\031\n\021fieldactualchange\030\010 \001(\010\"\325\001\n\016V4Generi"
  "cBytes\022\027\n\017secondsintoyear\030\001 \002(\r\022\014\n\004nano\030"
  "\002 \002(\r\022\013\n\003val\030\003 \002(\014\022\023\n\010severity\030\004 \001(\005:\0010\022"
  "\021\n\006status\030\005 \001(\005:\0010\022\023\n\013repeatcount\030\006 \001(\r\022"
  "&\n\013fieldvalues\030\007 \003(\0132\021.EPICS.FieldValue\022"
  "\031\n\021fieldactualchange\030\010 \001(\010\022\017\n\007userTag\030\t "
  "\001(\r\"\273\002\n\013PayloadInfo\022 \n\004type\030\001 \002(\0162\022.EPIC"
  "S.PayloadType\022\016\n\006pvname\030\002 \002(\t\022\014\n\004year\030\003 "
  "\002(\005\022\024\n\014elementCount\030\004 \001(\005\022\020\n\010unused00\030\005 "
  "\001(\001\022\020\n\010unused01\030\006 \001(\001\022\020\n\010unused02\030\007 \001(\001\022"
  "\020\n\010unused03\030\010 \001(\001\022\020\n\010unused04\030\t \001(\001\022\020\n\010u"
  "nused05\030\n \001(\001\022\020\n\010unused06\030\013 \001(\001\022\020\n\010unuse"
  "d07\030\014 \001(\001\022\020\n\010unused08\030\r \001(\001\022\020\n\010unused09\030"
  "\016 \001(\t\022\"\n\007headers\030\017 \003(\0132\021.EPICS.FieldValu"
  "e*\251\002\n\013PayloadType\022\021\n\rSCALAR_STRING\020\000\022\020\n\014"
  "SCALAR_SHORT\020\001\022\020\n\014SCALAR_FLOAT\020\002\022\017\n\013SCAL"
  "AR_ENUM\020\003\022\017\n\013SCALAR_BYTE\020\004\022\016\n\nSCALAR_INT"
  "\020\005\022\021\n\rSCALAR_DOUBLE\020\006\022\023\n\017WAVEFORM_STRING"
  "\020\007\022\022\n\016WAVEFORM_SHORT\020\010\022\022\n\016WAVEFORM_FLOAT"
  "\020\t\022\021\n\rWAVEFORM_ENUM\020\n\022\021\n\rWAVEFORM_BYTE\020\013"
  "\022\020\n\014WAVEFORM_INT\020\014\022\023\n\017WAVEFORM_DOUBLE\020\r\022"
  "\024\n\020V4_GENERIC_BYTES\020\016B4\n&edu.stanford.sl"
  "ac.archiverappliance.PBB\nEPICSEvent"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_epics_5fevent_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epics_5fevent_2eproto = {
  false, false, 3715, descriptor_table_protodef_epics_5fevent_2eproto, "epics_event.proto", 
  &descriptor_table_epics_5fevent_2eproto_once, nullptr, 0, 17,
  schemas, file_default_instances, TableStruct_epics_5fevent_2eproto::offsets,
  file_level_metadata_epics_5fevent_2eproto, file_level_enum_descriptors_epics_5fevent_2eproto, file_level_service_descriptors_epics_5fevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_epics_5fevent_2eproto_getter() {
  return &descriptor_table_epics_5fevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_epics_5fevent_2eproto(&descriptor_table_epics_5fevent_2eproto);
namespace EPICS {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_epics_5fevent_2eproto);
  return file_level_enum_descriptors_epics_5fevent_2eproto[0];
}
bool PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class FieldValue::_Internal {
 public:
  using HasBits = decltype(std::declval<FieldValue>()._has_bits_);
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FieldValue::FieldValue(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.FieldValue)
}
FieldValue::FieldValue(const FieldValue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:EPICS.FieldValue)
}

void FieldValue::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

FieldValue::~FieldValue() {
  // @@protoc_insertion_point(destructor:EPICS.FieldValue)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FieldValue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FieldValue::ArenaDtor(void* object) {
  FieldValue* _this = reinterpret_cast< FieldValue* >(object);
  (void)_this;
}
void FieldValue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FieldValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FieldValue::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.FieldValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      val_.ClearNonDefaultToEmpty();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FieldValue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EPICS.FieldValue.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string val = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EPICS.FieldValue.val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FieldValue::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.FieldValue)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EPICS.FieldValue.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // required string val = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EPICS.FieldValue.val");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_val(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.FieldValue)
  return target;
}

size_t FieldValue::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.FieldValue)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_val()) {
    // required string val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  return total_size;
}
size_t FieldValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.FieldValue)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string name = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required string val = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FieldValue::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.FieldValue)
  GOOGLE_DCHECK_NE(&from, this);
  const FieldValue* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FieldValue>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.FieldValue)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.FieldValue)
    MergeFrom(*source);
  }
}

void FieldValue::MergeFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.FieldValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_val(from._internal_val());
    }
  }
}

void FieldValue::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FieldValue::CopyFrom(const FieldValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.FieldValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FieldValue::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FieldValue::InternalSwap(FieldValue* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &val_, GetArenaForAllocation(),
      &other->val_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata FieldValue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[0]);
}

// ===================================================================

class ScalarString::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarString>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ScalarString::ScalarString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.ScalarString)
}
ScalarString::ScalarString(const ScalarString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArenaForAllocation());
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarString)
}

void ScalarString::SharedCtor() {
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarString::~ScalarString() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScalarString::ArenaDtor(void* object) {
  ScalarString* _this = reinterpret_cast< ScalarString* >(object);
  (void)_this;
}
void ScalarString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarString::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EPICS.ScalarString.val");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required string val = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_val().data(), static_cast<int>(this->_internal_val().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EPICS.ScalarString.val");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarString)
  return target;
}

size_t ScalarString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarString)
  size_t total_size = 0;

  if (_internal_has_val()) {
    // required string val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());
  }

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t ScalarString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarString)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarString)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarString)
    MergeFrom(*source);
  }
}

void ScalarString::MergeFrom(const ScalarString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_val(from._internal_val());
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarString::CopyFrom(const ScalarString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarString::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void ScalarString::InternalSwap(ScalarString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &val_, GetArenaForAllocation(),
      &other->val_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarString, fieldactualchange_)
      + sizeof(ScalarString::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(ScalarString, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[1]);
}

// ===================================================================

class ScalarByte::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarByte>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ScalarByte::ScalarByte(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.ScalarByte)
}
ScalarByte::ScalarByte(const ScalarByte& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArenaForAllocation());
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarByte)
}

void ScalarByte::SharedCtor() {
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarByte::~ScalarByte() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarByte)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarByte::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ScalarByte::ArenaDtor(void* object) {
  ScalarByte* _this = reinterpret_cast< ScalarByte* >(object);
  (void)_this;
}
void ScalarByte::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarByte::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarByte::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarByte)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarByte::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarByte::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarByte)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarByte)
  return target;
}

size_t ScalarByte::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarByte)
  size_t total_size = 0;

  if (_internal_has_val()) {
    // required bytes val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t ScalarByte::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarByte)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarByte::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarByte)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarByte* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarByte>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarByte)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarByte)
    MergeFrom(*source);
  }
}

void ScalarByte::MergeFrom(const ScalarByte& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarByte)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_val(from._internal_val());
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarByte::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarByte::CopyFrom(const ScalarByte& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarByte)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarByte::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void ScalarByte::InternalSwap(ScalarByte* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &val_, GetArenaForAllocation(),
      &other->val_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarByte, fieldactualchange_)
      + sizeof(ScalarByte::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(ScalarByte, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarByte::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[2]);
}

// ===================================================================

class ScalarShort::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarShort>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ScalarShort::ScalarShort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.ScalarShort)
}
ScalarShort::ScalarShort(const ScalarShort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarShort)
}

void ScalarShort::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarShort::~ScalarShort() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarShort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarShort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScalarShort::ArenaDtor(void* object) {
  ScalarShort* _this = reinterpret_cast< ScalarShort* >(object);
  (void)_this;
}
void ScalarShort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarShort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarShort::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarShort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarShort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint32 val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarShort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarShort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required sint32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarShort)
  return target;
}

size_t ScalarShort::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarShort)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  if (_internal_has_val()) {
    // required sint32 val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_val());
  }

  return total_size;
}
size_t ScalarShort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarShort)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

    // required sint32 val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarShort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarShort)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarShort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarShort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarShort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarShort)
    MergeFrom(*source);
  }
}

void ScalarShort::MergeFrom(const ScalarShort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarShort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarShort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarShort::CopyFrom(const ScalarShort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarShort::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void ScalarShort::InternalSwap(ScalarShort* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarShort, fieldactualchange_)
      + sizeof(ScalarShort::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(ScalarShort, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarShort::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[3]);
}

// ===================================================================

class ScalarInt::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarInt>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ScalarInt::ScalarInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.ScalarInt)
}
ScalarInt::ScalarInt(const ScalarInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarInt)
}

void ScalarInt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarInt::~ScalarInt() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScalarInt::ArenaDtor(void* object) {
  ScalarInt* _this = reinterpret_cast< ScalarInt* >(object);
  (void)_this;
}
void ScalarInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarInt::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sfixed32 val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr);
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required sfixed32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSFixed32ToArray(3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarInt)
  return target;
}

size_t ScalarInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarInt)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  if (_internal_has_val()) {
    // required sfixed32 val = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ScalarInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarInt)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

    // required sfixed32 val = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarInt)
    MergeFrom(*source);
  }
}

void ScalarInt::MergeFrom(const ScalarInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarInt::CopyFrom(const ScalarInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarInt::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void ScalarInt::InternalSwap(ScalarInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarInt, fieldactualchange_)
      + sizeof(ScalarInt::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(ScalarInt, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarInt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[4]);
}

// ===================================================================

class ScalarEnum::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarEnum>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ScalarEnum::ScalarEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.ScalarEnum)
}
ScalarEnum::ScalarEnum(const ScalarEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarEnum)
}

void ScalarEnum::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarEnum::~ScalarEnum() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarEnum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScalarEnum::ArenaDtor(void* object) {
  ScalarEnum* _this = reinterpret_cast< ScalarEnum* >(object);
  (void)_this;
}
void ScalarEnum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarEnum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required sint32 val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarEnum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required sint32 val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteSInt32ToArray(3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarEnum)
  return target;
}

size_t ScalarEnum::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarEnum)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  if (_internal_has_val()) {
    // required sint32 val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_val());
  }

  return total_size;
}
size_t ScalarEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarEnum)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

    // required sint32 val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SInt32Size(
        this->_internal_val());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarEnum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarEnum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarEnum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarEnum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarEnum)
    MergeFrom(*source);
  }
}

void ScalarEnum::MergeFrom(const ScalarEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarEnum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarEnum::CopyFrom(const ScalarEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarEnum::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void ScalarEnum::InternalSwap(ScalarEnum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarEnum, fieldactualchange_)
      + sizeof(ScalarEnum::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(ScalarEnum, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarEnum::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[5]);
}

// ===================================================================

class ScalarFloat::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarFloat>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ScalarFloat::ScalarFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.ScalarFloat)
}
ScalarFloat::ScalarFloat(const ScalarFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarFloat)
}

void ScalarFloat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarFloat::~ScalarFloat() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScalarFloat::ArenaDtor(void* object) {
  ScalarFloat* _this = reinterpret_cast< ScalarFloat* >(object);
  (void)_this;
}
void ScalarFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required float val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarFloat)
  return target;
}

size_t ScalarFloat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarFloat)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  if (_internal_has_val()) {
    // required float val = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ScalarFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarFloat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

    // required float val = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarFloat)
    MergeFrom(*source);
  }
}

void ScalarFloat::MergeFrom(const ScalarFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarFloat::CopyFrom(const ScalarFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarFloat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void ScalarFloat::InternalSwap(ScalarFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarFloat, fieldactualchange_)
      + sizeof(ScalarFloat::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(ScalarFloat, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarFloat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[6]);
}

// ===================================================================

class ScalarDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<ScalarDouble>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ScalarDouble::ScalarDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.ScalarDouble)
}
ScalarDouble::ScalarDouble(const ScalarDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.ScalarDouble)
}

void ScalarDouble::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

ScalarDouble::~ScalarDouble() {
  // @@protoc_insertion_point(destructor:EPICS.ScalarDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ScalarDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ScalarDouble::ArenaDtor(void* object) {
  ScalarDouble* _this = reinterpret_cast< ScalarDouble* >(object);
  (void)_this;
}
void ScalarDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ScalarDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ScalarDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.ScalarDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ScalarDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_val(&has_bits);
          val_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ScalarDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.ScalarDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required double val = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.ScalarDouble)
  return target;
}

size_t ScalarDouble::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.ScalarDouble)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  if (_internal_has_val()) {
    // required double val = 3;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t ScalarDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.ScalarDouble)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

    // required double val = 3;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ScalarDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.ScalarDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const ScalarDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ScalarDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.ScalarDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.ScalarDouble)
    MergeFrom(*source);
  }
}

void ScalarDouble::MergeFrom(const ScalarDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.ScalarDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      val_ = from.val_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ScalarDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.ScalarDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScalarDouble::CopyFrom(const ScalarDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.ScalarDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScalarDouble::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void ScalarDouble::InternalSwap(ScalarDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ScalarDouble, fieldactualchange_)
      + sizeof(ScalarDouble::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(ScalarDouble, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ScalarDouble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[7]);
}

// ===================================================================

class VectorString::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorString>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VectorString::VectorString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  val_(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.VectorString)
}
VectorString::VectorString(const VectorString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorString)
}

void VectorString::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorString::~VectorString() {
  // @@protoc_insertion_point(destructor:EPICS.VectorString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorString::ArenaDtor(void* object) {
  VectorString* _this = reinterpret_cast< VectorString* >(object);
  (void)_this;
}
void VectorString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorString::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_val();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            #ifndef NDEBUG
            ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EPICS.VectorString.val");
            #endif  // !NDEBUG
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // repeated string val = 3;
  for (int i = 0, n = this->_internal_val_size(); i < n; i++) {
    const auto& s = this->_internal_val(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EPICS.VectorString.val");
    target = stream->WriteString(3, s, target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorString)
  return target;
}

size_t VectorString::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorString)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t VectorString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorString)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string val = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(val_.size());
  for (int i = 0, n = val_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      val_.Get(i));
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorString)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorString)
    MergeFrom(*source);
  }
}

void VectorString::MergeFrom(const VectorString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorString::CopyFrom(const VectorString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorString::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void VectorString::InternalSwap(VectorString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_.InternalSwap(&other->val_);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorString, fieldactualchange_)
      + sizeof(VectorString::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(VectorString, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[8]);
}

// ===================================================================

class VectorChar::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorChar>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

VectorChar::VectorChar(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.VectorChar)
}
VectorChar::VectorChar(const VectorChar& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArenaForAllocation());
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorChar)
}

void VectorChar::SharedCtor() {
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorChar::~VectorChar() {
  // @@protoc_insertion_point(destructor:EPICS.VectorChar)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorChar::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VectorChar::ArenaDtor(void* object) {
  VectorChar* _this = reinterpret_cast< VectorChar* >(object);
  (void)_this;
}
void VectorChar::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorChar::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorChar::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorChar::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorChar::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorChar)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorChar)
  return target;
}

size_t VectorChar::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorChar)
  size_t total_size = 0;

  if (_internal_has_val()) {
    // required bytes val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t VectorChar::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorChar)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000078u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorChar::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorChar)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorChar* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorChar>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorChar)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorChar)
    MergeFrom(*source);
  }
}

void VectorChar::MergeFrom(const VectorChar& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorChar)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_val(from._internal_val());
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorChar::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorChar::CopyFrom(const VectorChar& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorChar)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorChar::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void VectorChar::InternalSwap(VectorChar* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &val_, GetArenaForAllocation(),
      &other->val_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorChar, fieldactualchange_)
      + sizeof(VectorChar::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(VectorChar, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorChar::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[9]);
}

// ===================================================================

class VectorShort::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorShort>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VectorShort::VectorShort(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  val_(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.VectorShort)
}
VectorShort::VectorShort(const VectorShort& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorShort)
}

void VectorShort::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorShort::~VectorShort() {
  // @@protoc_insertion_point(destructor:EPICS.VectorShort)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorShort::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorShort::ArenaDtor(void* object) {
  VectorShort* _this = reinterpret_cast< VectorShort* >(object);
  (void)_this;
}
void VectorShort::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorShort::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorShort::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorShort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorShort::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 val = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorShort::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorShort)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // repeated sint32 val = 3 [packed = true];
  {
    int byte_size = _val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          3, _internal_val(), byte_size, target);
    }
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorShort)
  return target;
}

size_t VectorShort::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorShort)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t VectorShort::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorShort)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 val = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorShort::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorShort)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorShort* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorShort>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorShort)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorShort)
    MergeFrom(*source);
  }
}

void VectorShort::MergeFrom(const VectorShort& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorShort)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorShort::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorShort::CopyFrom(const VectorShort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorShort::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void VectorShort::InternalSwap(VectorShort* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_.InternalSwap(&other->val_);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorShort, fieldactualchange_)
      + sizeof(VectorShort::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(VectorShort, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorShort::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[10]);
}

// ===================================================================

class VectorInt::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorInt>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VectorInt::VectorInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  val_(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.VectorInt)
}
VectorInt::VectorInt(const VectorInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorInt)
}

void VectorInt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorInt::~VectorInt() {
  // @@protoc_insertion_point(destructor:EPICS.VectorInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorInt::ArenaDtor(void* object) {
  VectorInt* _this = reinterpret_cast< VectorInt* >(object);
  (void)_this;
}
void VectorInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorInt::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sfixed32 val = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSFixed32Parser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<::PROTOBUF_NAMESPACE_ID::int32>(ptr));
          ptr += sizeof(::PROTOBUF_NAMESPACE_ID::int32);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // repeated sfixed32 val = 3 [packed = true];
  if (this->_internal_val_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorInt)
  return target;
}

size_t VectorInt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorInt)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t VectorInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorInt)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sfixed32 val = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorInt)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorInt)
    MergeFrom(*source);
  }
}

void VectorInt::MergeFrom(const VectorInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorInt::CopyFrom(const VectorInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorInt::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void VectorInt::InternalSwap(VectorInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_.InternalSwap(&other->val_);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorInt, fieldactualchange_)
      + sizeof(VectorInt::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(VectorInt, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorInt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[11]);
}

// ===================================================================

class VectorEnum::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorEnum>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VectorEnum::VectorEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  val_(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.VectorEnum)
}
VectorEnum::VectorEnum(const VectorEnum& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorEnum)
}

void VectorEnum::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorEnum::~VectorEnum() {
  // @@protoc_insertion_point(destructor:EPICS.VectorEnum)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorEnum::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorEnum::ArenaDtor(void* object) {
  VectorEnum* _this = reinterpret_cast< VectorEnum* >(object);
  (void)_this;
}
void VectorEnum::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorEnum::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorEnum::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorEnum::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated sint32 val = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedSInt32Parser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::ReadVarintZigZag32(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorEnum::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorEnum)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // repeated sint32 val = 3 [packed = true];
  {
    int byte_size = _val_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteSInt32Packed(
          3, _internal_val(), byte_size, target);
    }
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorEnum)
  return target;
}

size_t VectorEnum::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorEnum)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t VectorEnum::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorEnum)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated sint32 val = 3 [packed = true];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      SInt32Size(this->val_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _val_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorEnum::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorEnum)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorEnum* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorEnum>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorEnum)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorEnum)
    MergeFrom(*source);
  }
}

void VectorEnum::MergeFrom(const VectorEnum& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorEnum)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorEnum::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorEnum::CopyFrom(const VectorEnum& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorEnum)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorEnum::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void VectorEnum::InternalSwap(VectorEnum* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_.InternalSwap(&other->val_);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorEnum, fieldactualchange_)
      + sizeof(VectorEnum::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(VectorEnum, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorEnum::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[12]);
}

// ===================================================================

class VectorFloat::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorFloat>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VectorFloat::VectorFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  val_(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.VectorFloat)
}
VectorFloat::VectorFloat(const VectorFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorFloat)
}

void VectorFloat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorFloat::~VectorFloat() {
  // @@protoc_insertion_point(destructor:EPICS.VectorFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorFloat::ArenaDtor(void* object) {
  VectorFloat* _this = reinterpret_cast< VectorFloat* >(object);
  (void)_this;
}
void VectorFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float val = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // repeated float val = 3 [packed = true];
  if (this->_internal_val_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorFloat)
  return target;
}

size_t VectorFloat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorFloat)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t VectorFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorFloat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float val = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_val_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorFloat)
    MergeFrom(*source);
  }
}

void VectorFloat::MergeFrom(const VectorFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorFloat::CopyFrom(const VectorFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorFloat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void VectorFloat::InternalSwap(VectorFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_.InternalSwap(&other->val_);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorFloat, fieldactualchange_)
      + sizeof(VectorFloat::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(VectorFloat, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorFloat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[13]);
}

// ===================================================================

class VectorDouble::_Internal {
 public:
  using HasBits = decltype(std::declval<VectorDouble>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

VectorDouble::VectorDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  val_(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.VectorDouble)
}
VectorDouble::VectorDouble(const VectorDouble& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      val_(from.val_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  // @@protoc_insertion_point(copy_constructor:EPICS.VectorDouble)
}

void VectorDouble::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&fieldactualchange_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
}

VectorDouble::~VectorDouble() {
  // @@protoc_insertion_point(destructor:EPICS.VectorDouble)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VectorDouble::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void VectorDouble::ArenaDtor(void* object) {
  VectorDouble* _this = reinterpret_cast< VectorDouble* >(object);
  (void)_this;
}
void VectorDouble::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VectorDouble::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void VectorDouble::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.VectorDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  val_.Clear();
  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fieldactualchange_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(fieldactualchange_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VectorDouble::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated double val = 3 [packed = true];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedDoubleParser(_internal_mutable_val(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25) {
          _internal_add_val(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VectorDouble::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.VectorDouble)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // repeated double val = 3 [packed = true];
  if (this->_internal_val_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.VectorDouble)
  return target;
}

size_t VectorDouble::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.VectorDouble)
  size_t total_size = 0;

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t VectorDouble::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.VectorDouble)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated double val = 3 [packed = true];
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_val_size());
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    total_size += data_size;
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003cu) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 1;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VectorDouble::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.VectorDouble)
  GOOGLE_DCHECK_NE(&from, this);
  const VectorDouble* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VectorDouble>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.VectorDouble)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.VectorDouble)
    MergeFrom(*source);
  }
}

void VectorDouble::MergeFrom(const VectorDouble& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.VectorDouble)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  val_.MergeFrom(from.val_);
  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000002u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000004u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000020u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VectorDouble::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.VectorDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VectorDouble::CopyFrom(const VectorDouble& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.VectorDouble)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VectorDouble::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void VectorDouble::InternalSwap(VectorDouble* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  val_.InternalSwap(&other->val_);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VectorDouble, fieldactualchange_)
      + sizeof(VectorDouble::fieldactualchange_)
      - PROTOBUF_FIELD_OFFSET(VectorDouble, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VectorDouble::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[14]);
}

// ===================================================================

class V4GenericBytes::_Internal {
 public:
  using HasBits = decltype(std::declval<V4GenericBytes>()._has_bits_);
  static void set_has_secondsintoyear(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nano(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_val(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_severity(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_repeatcount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_fieldactualchange(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_usertag(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

V4GenericBytes::V4GenericBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  fieldvalues_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.V4GenericBytes)
}
V4GenericBytes::V4GenericBytes(const V4GenericBytes& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      fieldvalues_(from.fieldvalues_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_val()) {
    val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_val(), 
      GetArenaForAllocation());
  }
  ::memcpy(&secondsintoyear_, &from.secondsintoyear_,
    static_cast<size_t>(reinterpret_cast<char*>(&usertag_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(usertag_));
  // @@protoc_insertion_point(copy_constructor:EPICS.V4GenericBytes)
}

void V4GenericBytes::SharedCtor() {
val_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&secondsintoyear_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&usertag_) -
    reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(usertag_));
}

V4GenericBytes::~V4GenericBytes() {
  // @@protoc_insertion_point(destructor:EPICS.V4GenericBytes)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void V4GenericBytes::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  val_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void V4GenericBytes::ArenaDtor(void* object) {
  V4GenericBytes* _this = reinterpret_cast< V4GenericBytes* >(object);
  (void)_this;
}
void V4GenericBytes::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void V4GenericBytes::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void V4GenericBytes::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.V4GenericBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  fieldvalues_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    val_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&secondsintoyear_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&usertag_) -
        reinterpret_cast<char*>(&secondsintoyear_)) + sizeof(usertag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* V4GenericBytes::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required uint32 secondsintoyear = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_secondsintoyear(&has_bits);
          secondsintoyear_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nano = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nano(&has_bits);
          nano_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes val = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_val();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 severity = 4 [default = 0];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_severity(&has_bits);
          severity_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 5 [default = 0];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 repeatcount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_repeatcount(&has_bits);
          repeatcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue fieldvalues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_fieldvalues(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // optional bool fieldactualchange = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_fieldactualchange(&has_bits);
          fieldactualchange_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 userTag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_usertag(&has_bits);
          usertag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* V4GenericBytes::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.V4GenericBytes)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 secondsintoyear = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_secondsintoyear(), target);
  }

  // required uint32 nano = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nano(), target);
  }

  // required bytes val = 3;
  if (cached_has_bits & 0x00000001u) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_val(), target);
  }

  // optional int32 severity = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_severity(), target);
  }

  // optional int32 status = 5 [default = 0];
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_status(), target);
  }

  // optional uint32 repeatcount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_repeatcount(), target);
  }

  // repeated .EPICS.FieldValue fieldvalues = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fieldvalues_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_fieldvalues(i), target, stream);
  }

  // optional bool fieldactualchange = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_fieldactualchange(), target);
  }

  // optional uint32 userTag = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_usertag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.V4GenericBytes)
  return target;
}

size_t V4GenericBytes::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.V4GenericBytes)
  size_t total_size = 0;

  if (_internal_has_val()) {
    // required bytes val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());
  }

  if (_internal_has_secondsintoyear()) {
    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());
  }

  if (_internal_has_nano()) {
    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());
  }

  return total_size;
}
size_t V4GenericBytes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.V4GenericBytes)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required bytes val = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_val());

    // required uint32 secondsintoyear = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_secondsintoyear());

    // required uint32 nano = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nano());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue fieldvalues = 7;
  total_size += 1UL * this->_internal_fieldvalues_size();
  for (const auto& msg : this->fieldvalues_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000f8u) {
    // optional int32 severity = 4 [default = 0];
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_severity());
    }

    // optional int32 status = 5 [default = 0];
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional uint32 repeatcount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_repeatcount());
    }

    // optional bool fieldactualchange = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 1;
    }

    // optional uint32 userTag = 9;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_usertag());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void V4GenericBytes::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.V4GenericBytes)
  GOOGLE_DCHECK_NE(&from, this);
  const V4GenericBytes* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<V4GenericBytes>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.V4GenericBytes)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.V4GenericBytes)
    MergeFrom(*source);
  }
}

void V4GenericBytes::MergeFrom(const V4GenericBytes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.V4GenericBytes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  fieldvalues_.MergeFrom(from.fieldvalues_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_val(from._internal_val());
    }
    if (cached_has_bits & 0x00000002u) {
      secondsintoyear_ = from.secondsintoyear_;
    }
    if (cached_has_bits & 0x00000004u) {
      nano_ = from.nano_;
    }
    if (cached_has_bits & 0x00000008u) {
      severity_ = from.severity_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000020u) {
      repeatcount_ = from.repeatcount_;
    }
    if (cached_has_bits & 0x00000040u) {
      fieldactualchange_ = from.fieldactualchange_;
    }
    if (cached_has_bits & 0x00000080u) {
      usertag_ = from.usertag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void V4GenericBytes::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.V4GenericBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void V4GenericBytes::CopyFrom(const V4GenericBytes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.V4GenericBytes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool V4GenericBytes::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fieldvalues_)) return false;
  return true;
}

void V4GenericBytes::InternalSwap(V4GenericBytes* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  fieldvalues_.InternalSwap(&other->fieldvalues_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &val_, GetArenaForAllocation(),
      &other->val_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(V4GenericBytes, usertag_)
      + sizeof(V4GenericBytes::usertag_)
      - PROTOBUF_FIELD_OFFSET(V4GenericBytes, secondsintoyear_)>(
          reinterpret_cast<char*>(&secondsintoyear_),
          reinterpret_cast<char*>(&other->secondsintoyear_));
}

::PROTOBUF_NAMESPACE_ID::Metadata V4GenericBytes::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[15]);
}

// ===================================================================

class PayloadInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<PayloadInfo>()._has_bits_);
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pvname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_elementcount(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_unused00(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_unused01(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_unused02(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_unused03(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unused04(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_unused05(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_unused06(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_unused07(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_unused08(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_unused09(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000d) ^ 0x0000000d) != 0;
  }
};

PayloadInfo::PayloadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  headers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:EPICS.PayloadInfo)
}
PayloadInfo::PayloadInfo(const PayloadInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      headers_(from.headers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  pvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_pvname()) {
    pvname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pvname(), 
      GetArenaForAllocation());
  }
  unused09_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_unused09()) {
    unused09_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_unused09(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&elementcount_) -
    reinterpret_cast<char*>(&type_)) + sizeof(elementcount_));
  // @@protoc_insertion_point(copy_constructor:EPICS.PayloadInfo)
}

void PayloadInfo::SharedCtor() {
pvname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
unused09_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&elementcount_) -
    reinterpret_cast<char*>(&type_)) + sizeof(elementcount_));
}

PayloadInfo::~PayloadInfo() {
  // @@protoc_insertion_point(destructor:EPICS.PayloadInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PayloadInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  pvname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  unused09_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PayloadInfo::ArenaDtor(void* object) {
  PayloadInfo* _this = reinterpret_cast< PayloadInfo* >(object);
  (void)_this;
}
void PayloadInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PayloadInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PayloadInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:EPICS.PayloadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  headers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      pvname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      unused09_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&unused03_) -
        reinterpret_cast<char*>(&type_)) + sizeof(unused03_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&unused04_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&elementcount_) -
        reinterpret_cast<char*>(&unused04_)) + sizeof(elementcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PayloadInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .EPICS.PayloadType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::EPICS::PayloadType_IsValid(val))) {
            _internal_set_type(static_cast<::EPICS::PayloadType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string pvname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pvname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EPICS.PayloadInfo.pvname");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 year = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 elementCount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_elementcount(&has_bits);
          elementcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional double unused00 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_unused00(&has_bits);
          unused00_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused01 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_unused01(&has_bits);
          unused01_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused02 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_unused02(&has_bits);
          unused02_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused03 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_unused03(&has_bits);
          unused03_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused04 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_unused04(&has_bits);
          unused04_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused05 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_unused05(&has_bits);
          unused05_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused06 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_unused06(&has_bits);
          unused06_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused07 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_unused07(&has_bits);
          unused07_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double unused08 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_unused08(&has_bits);
          unused08_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional string unused09 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_unused09();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EPICS.PayloadInfo.unused09");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .EPICS.FieldValue headers = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_headers(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PayloadInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EPICS.PayloadInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .EPICS.PayloadType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // required string pvname = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_pvname().data(), static_cast<int>(this->_internal_pvname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EPICS.PayloadInfo.pvname");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_pvname(), target);
  }

  // required int32 year = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_year(), target);
  }

  // optional int32 elementCount = 4;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_elementcount(), target);
  }

  // optional double unused00 = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_unused00(), target);
  }

  // optional double unused01 = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_unused01(), target);
  }

  // optional double unused02 = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_unused02(), target);
  }

  // optional double unused03 = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_unused03(), target);
  }

  // optional double unused04 = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_unused04(), target);
  }

  // optional double unused05 = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_unused05(), target);
  }

  // optional double unused06 = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_unused06(), target);
  }

  // optional double unused07 = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_unused07(), target);
  }

  // optional double unused08 = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_unused08(), target);
  }

  // optional string unused09 = 14;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_unused09().data(), static_cast<int>(this->_internal_unused09().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "EPICS.PayloadInfo.unused09");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_unused09(), target);
  }

  // repeated .EPICS.FieldValue headers = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_headers_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_headers(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EPICS.PayloadInfo)
  return target;
}

size_t PayloadInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:EPICS.PayloadInfo)
  size_t total_size = 0;

  if (_internal_has_pvname()) {
    // required string pvname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvname());
  }

  if (_internal_has_type()) {
    // required .EPICS.PayloadType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (_internal_has_year()) {
    // required int32 year = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  return total_size;
}
size_t PayloadInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EPICS.PayloadInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000d) ^ 0x0000000d) == 0) {  // All required fields are present.
    // required string pvname = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pvname());

    // required .EPICS.PayloadType type = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());

    // required int32 year = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .EPICS.FieldValue headers = 15;
  total_size += 1UL * this->_internal_headers_size();
  for (const auto& msg : this->headers_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional string unused09 = 14;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_unused09());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional double unused00 = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

    // optional double unused01 = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 8;
    }

    // optional double unused02 = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 + 8;
    }

    // optional double unused03 = 8;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 + 8;
    }

  }
  if (cached_has_bits & 0x00003f00u) {
    // optional double unused04 = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double unused05 = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double unused06 = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double unused07 = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional double unused08 = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 8;
    }

    // optional int32 elementCount = 4;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_elementcount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PayloadInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EPICS.PayloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PayloadInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PayloadInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EPICS.PayloadInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EPICS.PayloadInfo)
    MergeFrom(*source);
  }
}

void PayloadInfo::MergeFrom(const PayloadInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EPICS.PayloadInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  headers_.MergeFrom(from.headers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_pvname(from._internal_pvname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_unused09(from._internal_unused09());
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000010u) {
      unused00_ = from.unused00_;
    }
    if (cached_has_bits & 0x00000020u) {
      unused01_ = from.unused01_;
    }
    if (cached_has_bits & 0x00000040u) {
      unused02_ = from.unused02_;
    }
    if (cached_has_bits & 0x00000080u) {
      unused03_ = from.unused03_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      unused04_ = from.unused04_;
    }
    if (cached_has_bits & 0x00000200u) {
      unused05_ = from.unused05_;
    }
    if (cached_has_bits & 0x00000400u) {
      unused06_ = from.unused06_;
    }
    if (cached_has_bits & 0x00000800u) {
      unused07_ = from.unused07_;
    }
    if (cached_has_bits & 0x00001000u) {
      unused08_ = from.unused08_;
    }
    if (cached_has_bits & 0x00002000u) {
      elementcount_ = from.elementcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PayloadInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EPICS.PayloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PayloadInfo::CopyFrom(const PayloadInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EPICS.PayloadInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PayloadInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(headers_)) return false;
  return true;
}

void PayloadInfo::InternalSwap(PayloadInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  headers_.InternalSwap(&other->headers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pvname_, GetArenaForAllocation(),
      &other->pvname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &unused09_, GetArenaForAllocation(),
      &other->unused09_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PayloadInfo, elementcount_)
      + sizeof(PayloadInfo::elementcount_)
      - PROTOBUF_FIELD_OFFSET(PayloadInfo, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PayloadInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_epics_5fevent_2eproto_getter, &descriptor_table_epics_5fevent_2eproto_once,
      file_level_metadata_epics_5fevent_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace EPICS
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::EPICS::FieldValue* Arena::CreateMaybeMessage< ::EPICS::FieldValue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::FieldValue >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::ScalarString* Arena::CreateMaybeMessage< ::EPICS::ScalarString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::ScalarString >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::ScalarByte* Arena::CreateMaybeMessage< ::EPICS::ScalarByte >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::ScalarByte >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::ScalarShort* Arena::CreateMaybeMessage< ::EPICS::ScalarShort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::ScalarShort >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::ScalarInt* Arena::CreateMaybeMessage< ::EPICS::ScalarInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::ScalarInt >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::ScalarEnum* Arena::CreateMaybeMessage< ::EPICS::ScalarEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::ScalarEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::ScalarFloat* Arena::CreateMaybeMessage< ::EPICS::ScalarFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::ScalarFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::ScalarDouble* Arena::CreateMaybeMessage< ::EPICS::ScalarDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::ScalarDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::VectorString* Arena::CreateMaybeMessage< ::EPICS::VectorString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::VectorString >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::VectorChar* Arena::CreateMaybeMessage< ::EPICS::VectorChar >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::VectorChar >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::VectorShort* Arena::CreateMaybeMessage< ::EPICS::VectorShort >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::VectorShort >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::VectorInt* Arena::CreateMaybeMessage< ::EPICS::VectorInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::VectorInt >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::VectorEnum* Arena::CreateMaybeMessage< ::EPICS::VectorEnum >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::VectorEnum >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::VectorFloat* Arena::CreateMaybeMessage< ::EPICS::VectorFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::VectorFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::VectorDouble* Arena::CreateMaybeMessage< ::EPICS::VectorDouble >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::VectorDouble >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::V4GenericBytes* Arena::CreateMaybeMessage< ::EPICS::V4GenericBytes >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::V4GenericBytes >(arena);
}
template<> PROTOBUF_NOINLINE ::EPICS::PayloadInfo* Arena::CreateMaybeMessage< ::EPICS::PayloadInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::EPICS::PayloadInfo >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
