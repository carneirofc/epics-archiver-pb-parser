// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: epics_event.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_epics_5fevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_epics_5fevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_epics_5fevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_epics_5fevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[17]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_epics_5fevent_2eproto;
namespace EPICS {
class FieldValue;
struct FieldValueDefaultTypeInternal;
extern FieldValueDefaultTypeInternal _FieldValue_default_instance_;
class PayloadInfo;
struct PayloadInfoDefaultTypeInternal;
extern PayloadInfoDefaultTypeInternal _PayloadInfo_default_instance_;
class ScalarByte;
struct ScalarByteDefaultTypeInternal;
extern ScalarByteDefaultTypeInternal _ScalarByte_default_instance_;
class ScalarDouble;
struct ScalarDoubleDefaultTypeInternal;
extern ScalarDoubleDefaultTypeInternal _ScalarDouble_default_instance_;
class ScalarEnum;
struct ScalarEnumDefaultTypeInternal;
extern ScalarEnumDefaultTypeInternal _ScalarEnum_default_instance_;
class ScalarFloat;
struct ScalarFloatDefaultTypeInternal;
extern ScalarFloatDefaultTypeInternal _ScalarFloat_default_instance_;
class ScalarInt;
struct ScalarIntDefaultTypeInternal;
extern ScalarIntDefaultTypeInternal _ScalarInt_default_instance_;
class ScalarShort;
struct ScalarShortDefaultTypeInternal;
extern ScalarShortDefaultTypeInternal _ScalarShort_default_instance_;
class ScalarString;
struct ScalarStringDefaultTypeInternal;
extern ScalarStringDefaultTypeInternal _ScalarString_default_instance_;
class V4GenericBytes;
struct V4GenericBytesDefaultTypeInternal;
extern V4GenericBytesDefaultTypeInternal _V4GenericBytes_default_instance_;
class VectorChar;
struct VectorCharDefaultTypeInternal;
extern VectorCharDefaultTypeInternal _VectorChar_default_instance_;
class VectorDouble;
struct VectorDoubleDefaultTypeInternal;
extern VectorDoubleDefaultTypeInternal _VectorDouble_default_instance_;
class VectorEnum;
struct VectorEnumDefaultTypeInternal;
extern VectorEnumDefaultTypeInternal _VectorEnum_default_instance_;
class VectorFloat;
struct VectorFloatDefaultTypeInternal;
extern VectorFloatDefaultTypeInternal _VectorFloat_default_instance_;
class VectorInt;
struct VectorIntDefaultTypeInternal;
extern VectorIntDefaultTypeInternal _VectorInt_default_instance_;
class VectorShort;
struct VectorShortDefaultTypeInternal;
extern VectorShortDefaultTypeInternal _VectorShort_default_instance_;
class VectorString;
struct VectorStringDefaultTypeInternal;
extern VectorStringDefaultTypeInternal _VectorString_default_instance_;
}  // namespace EPICS
PROTOBUF_NAMESPACE_OPEN
template<> ::EPICS::FieldValue* Arena::CreateMaybeMessage<::EPICS::FieldValue>(Arena*);
template<> ::EPICS::PayloadInfo* Arena::CreateMaybeMessage<::EPICS::PayloadInfo>(Arena*);
template<> ::EPICS::ScalarByte* Arena::CreateMaybeMessage<::EPICS::ScalarByte>(Arena*);
template<> ::EPICS::ScalarDouble* Arena::CreateMaybeMessage<::EPICS::ScalarDouble>(Arena*);
template<> ::EPICS::ScalarEnum* Arena::CreateMaybeMessage<::EPICS::ScalarEnum>(Arena*);
template<> ::EPICS::ScalarFloat* Arena::CreateMaybeMessage<::EPICS::ScalarFloat>(Arena*);
template<> ::EPICS::ScalarInt* Arena::CreateMaybeMessage<::EPICS::ScalarInt>(Arena*);
template<> ::EPICS::ScalarShort* Arena::CreateMaybeMessage<::EPICS::ScalarShort>(Arena*);
template<> ::EPICS::ScalarString* Arena::CreateMaybeMessage<::EPICS::ScalarString>(Arena*);
template<> ::EPICS::V4GenericBytes* Arena::CreateMaybeMessage<::EPICS::V4GenericBytes>(Arena*);
template<> ::EPICS::VectorChar* Arena::CreateMaybeMessage<::EPICS::VectorChar>(Arena*);
template<> ::EPICS::VectorDouble* Arena::CreateMaybeMessage<::EPICS::VectorDouble>(Arena*);
template<> ::EPICS::VectorEnum* Arena::CreateMaybeMessage<::EPICS::VectorEnum>(Arena*);
template<> ::EPICS::VectorFloat* Arena::CreateMaybeMessage<::EPICS::VectorFloat>(Arena*);
template<> ::EPICS::VectorInt* Arena::CreateMaybeMessage<::EPICS::VectorInt>(Arena*);
template<> ::EPICS::VectorShort* Arena::CreateMaybeMessage<::EPICS::VectorShort>(Arena*);
template<> ::EPICS::VectorString* Arena::CreateMaybeMessage<::EPICS::VectorString>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace EPICS {

enum PayloadType : int {
  SCALAR_STRING = 0,
  SCALAR_SHORT = 1,
  SCALAR_FLOAT = 2,
  SCALAR_ENUM = 3,
  SCALAR_BYTE = 4,
  SCALAR_INT = 5,
  SCALAR_DOUBLE = 6,
  WAVEFORM_STRING = 7,
  WAVEFORM_SHORT = 8,
  WAVEFORM_FLOAT = 9,
  WAVEFORM_ENUM = 10,
  WAVEFORM_BYTE = 11,
  WAVEFORM_INT = 12,
  WAVEFORM_DOUBLE = 13,
  V4_GENERIC_BYTES = 14
};
bool PayloadType_IsValid(int value);
constexpr PayloadType PayloadType_MIN = SCALAR_STRING;
constexpr PayloadType PayloadType_MAX = V4_GENERIC_BYTES;
constexpr int PayloadType_ARRAYSIZE = PayloadType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadType_descriptor();
template<typename T>
inline const std::string& PayloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PayloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PayloadType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PayloadType_descriptor(), enum_t_value);
}
inline bool PayloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PayloadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PayloadType>(
    PayloadType_descriptor(), name, value);
}
// ===================================================================

class FieldValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.FieldValue) */ {
 public:
  inline FieldValue() : FieldValue(nullptr) {}
  ~FieldValue() override;
  explicit constexpr FieldValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FieldValue(const FieldValue& from);
  FieldValue(FieldValue&& from) noexcept
    : FieldValue() {
    *this = ::std::move(from);
  }

  inline FieldValue& operator=(const FieldValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline FieldValue& operator=(FieldValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FieldValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const FieldValue* internal_default_instance() {
    return reinterpret_cast<const FieldValue*>(
               &_FieldValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FieldValue& a, FieldValue& b) {
    a.Swap(&b);
  }
  inline void Swap(FieldValue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FieldValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FieldValue* New() const final {
    return new FieldValue();
  }

  FieldValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FieldValue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FieldValue& from);
  void MergeFrom(const FieldValue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FieldValue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.FieldValue";
  }
  protected:
  explicit FieldValue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValFieldNumber = 2,
  };
  // required string name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required string val = 2;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // @@protoc_insertion_point(class_scope:EPICS.FieldValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ScalarString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.ScalarString) */ {
 public:
  inline ScalarString() : ScalarString(nullptr) {}
  ~ScalarString() override;
  explicit constexpr ScalarString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarString(const ScalarString& from);
  ScalarString(ScalarString&& from) noexcept
    : ScalarString() {
    *this = ::std::move(from);
  }

  inline ScalarString& operator=(const ScalarString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarString& operator=(ScalarString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarString* internal_default_instance() {
    return reinterpret_cast<const ScalarString*>(
               &_ScalarString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ScalarString& a, ScalarString& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarString* New() const final {
    return new ScalarString();
  }

  ScalarString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarString& from);
  void MergeFrom(const ScalarString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.ScalarString";
  }
  protected:
  explicit ScalarString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kValFieldNumber = 3,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required string val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.ScalarString)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ScalarByte final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.ScalarByte) */ {
 public:
  inline ScalarByte() : ScalarByte(nullptr) {}
  ~ScalarByte() override;
  explicit constexpr ScalarByte(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarByte(const ScalarByte& from);
  ScalarByte(ScalarByte&& from) noexcept
    : ScalarByte() {
    *this = ::std::move(from);
  }

  inline ScalarByte& operator=(const ScalarByte& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarByte& operator=(ScalarByte&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarByte& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarByte* internal_default_instance() {
    return reinterpret_cast<const ScalarByte*>(
               &_ScalarByte_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ScalarByte& a, ScalarByte& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarByte* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarByte* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarByte* New() const final {
    return new ScalarByte();
  }

  ScalarByte* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarByte>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarByte& from);
  void MergeFrom(const ScalarByte& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarByte* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.ScalarByte";
  }
  protected:
  explicit ScalarByte(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kValFieldNumber = 3,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required bytes val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.ScalarByte)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ScalarShort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.ScalarShort) */ {
 public:
  inline ScalarShort() : ScalarShort(nullptr) {}
  ~ScalarShort() override;
  explicit constexpr ScalarShort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarShort(const ScalarShort& from);
  ScalarShort(ScalarShort&& from) noexcept
    : ScalarShort() {
    *this = ::std::move(from);
  }

  inline ScalarShort& operator=(const ScalarShort& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarShort& operator=(ScalarShort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarShort& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarShort* internal_default_instance() {
    return reinterpret_cast<const ScalarShort*>(
               &_ScalarShort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ScalarShort& a, ScalarShort& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarShort* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarShort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarShort* New() const final {
    return new ScalarShort();
  }

  ScalarShort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarShort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarShort& from);
  void MergeFrom(const ScalarShort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarShort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.ScalarShort";
  }
  protected:
  explicit ScalarShort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kValFieldNumber = 3,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required sint32 val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.ScalarShort)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ScalarInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.ScalarInt) */ {
 public:
  inline ScalarInt() : ScalarInt(nullptr) {}
  ~ScalarInt() override;
  explicit constexpr ScalarInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarInt(const ScalarInt& from);
  ScalarInt(ScalarInt&& from) noexcept
    : ScalarInt() {
    *this = ::std::move(from);
  }

  inline ScalarInt& operator=(const ScalarInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarInt& operator=(ScalarInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarInt* internal_default_instance() {
    return reinterpret_cast<const ScalarInt*>(
               &_ScalarInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ScalarInt& a, ScalarInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarInt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarInt* New() const final {
    return new ScalarInt();
  }

  ScalarInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarInt& from);
  void MergeFrom(const ScalarInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.ScalarInt";
  }
  protected:
  explicit ScalarInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kValFieldNumber = 3,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required sfixed32 val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.ScalarInt)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ScalarEnum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.ScalarEnum) */ {
 public:
  inline ScalarEnum() : ScalarEnum(nullptr) {}
  ~ScalarEnum() override;
  explicit constexpr ScalarEnum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarEnum(const ScalarEnum& from);
  ScalarEnum(ScalarEnum&& from) noexcept
    : ScalarEnum() {
    *this = ::std::move(from);
  }

  inline ScalarEnum& operator=(const ScalarEnum& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarEnum& operator=(ScalarEnum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarEnum& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarEnum* internal_default_instance() {
    return reinterpret_cast<const ScalarEnum*>(
               &_ScalarEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ScalarEnum& a, ScalarEnum& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarEnum* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarEnum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarEnum* New() const final {
    return new ScalarEnum();
  }

  ScalarEnum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarEnum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarEnum& from);
  void MergeFrom(const ScalarEnum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarEnum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.ScalarEnum";
  }
  protected:
  explicit ScalarEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kValFieldNumber = 3,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required sint32 val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  ::PROTOBUF_NAMESPACE_ID::int32 val() const;
  void set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val() const;
  void _internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.ScalarEnum)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 val_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ScalarFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.ScalarFloat) */ {
 public:
  inline ScalarFloat() : ScalarFloat(nullptr) {}
  ~ScalarFloat() override;
  explicit constexpr ScalarFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarFloat(const ScalarFloat& from);
  ScalarFloat(ScalarFloat&& from) noexcept
    : ScalarFloat() {
    *this = ::std::move(from);
  }

  inline ScalarFloat& operator=(const ScalarFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarFloat& operator=(ScalarFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarFloat* internal_default_instance() {
    return reinterpret_cast<const ScalarFloat*>(
               &_ScalarFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ScalarFloat& a, ScalarFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarFloat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarFloat* New() const final {
    return new ScalarFloat();
  }

  ScalarFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarFloat& from);
  void MergeFrom(const ScalarFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.ScalarFloat";
  }
  protected:
  explicit ScalarFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kValFieldNumber = 3,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  float val() const;
  void set_val(float value);
  private:
  float _internal_val() const;
  void _internal_set_val(float value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.ScalarFloat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  float val_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class ScalarDouble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.ScalarDouble) */ {
 public:
  inline ScalarDouble() : ScalarDouble(nullptr) {}
  ~ScalarDouble() override;
  explicit constexpr ScalarDouble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ScalarDouble(const ScalarDouble& from);
  ScalarDouble(ScalarDouble&& from) noexcept
    : ScalarDouble() {
    *this = ::std::move(from);
  }

  inline ScalarDouble& operator=(const ScalarDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline ScalarDouble& operator=(ScalarDouble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ScalarDouble& default_instance() {
    return *internal_default_instance();
  }
  static inline const ScalarDouble* internal_default_instance() {
    return reinterpret_cast<const ScalarDouble*>(
               &_ScalarDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ScalarDouble& a, ScalarDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(ScalarDouble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ScalarDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ScalarDouble* New() const final {
    return new ScalarDouble();
  }

  ScalarDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ScalarDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ScalarDouble& from);
  void MergeFrom(const ScalarDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ScalarDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.ScalarDouble";
  }
  protected:
  explicit ScalarDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kValFieldNumber = 3,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  double val() const;
  void set_val(double value);
  private:
  double _internal_val() const;
  void _internal_set_val(double value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.ScalarDouble)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  double val_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VectorString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.VectorString) */ {
 public:
  inline VectorString() : VectorString(nullptr) {}
  ~VectorString() override;
  explicit constexpr VectorString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorString(const VectorString& from);
  VectorString(VectorString&& from) noexcept
    : VectorString() {
    *this = ::std::move(from);
  }

  inline VectorString& operator=(const VectorString& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorString& operator=(VectorString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorString& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorString* internal_default_instance() {
    return reinterpret_cast<const VectorString*>(
               &_VectorString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(VectorString& a, VectorString& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorString* New() const final {
    return new VectorString();
  }

  VectorString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorString& from);
  void MergeFrom(const VectorString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.VectorString";
  }
  protected:
  explicit VectorString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated string val = 3;
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  const std::string& val(int index) const;
  std::string* mutable_val(int index);
  void set_val(int index, const std::string& value);
  void set_val(int index, std::string&& value);
  void set_val(int index, const char* value);
  void set_val(int index, const char* value, size_t size);
  std::string* add_val();
  void add_val(const std::string& value);
  void add_val(std::string&& value);
  void add_val(const char* value);
  void add_val(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_val();
  private:
  const std::string& _internal_val(int index) const;
  std::string* _internal_add_val();
  public:

  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.VectorString)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VectorChar final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.VectorChar) */ {
 public:
  inline VectorChar() : VectorChar(nullptr) {}
  ~VectorChar() override;
  explicit constexpr VectorChar(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorChar(const VectorChar& from);
  VectorChar(VectorChar&& from) noexcept
    : VectorChar() {
    *this = ::std::move(from);
  }

  inline VectorChar& operator=(const VectorChar& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorChar& operator=(VectorChar&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorChar& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorChar* internal_default_instance() {
    return reinterpret_cast<const VectorChar*>(
               &_VectorChar_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(VectorChar& a, VectorChar& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorChar* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorChar* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorChar* New() const final {
    return new VectorChar();
  }

  VectorChar* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorChar>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorChar& from);
  void MergeFrom(const VectorChar& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorChar* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.VectorChar";
  }
  protected:
  explicit VectorChar(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kValFieldNumber = 3,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required bytes val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.VectorChar)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VectorShort final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.VectorShort) */ {
 public:
  inline VectorShort() : VectorShort(nullptr) {}
  ~VectorShort() override;
  explicit constexpr VectorShort(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorShort(const VectorShort& from);
  VectorShort(VectorShort&& from) noexcept
    : VectorShort() {
    *this = ::std::move(from);
  }

  inline VectorShort& operator=(const VectorShort& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorShort& operator=(VectorShort&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorShort& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorShort* internal_default_instance() {
    return reinterpret_cast<const VectorShort*>(
               &_VectorShort_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(VectorShort& a, VectorShort& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorShort* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorShort* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorShort* New() const final {
    return new VectorShort();
  }

  VectorShort* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorShort>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorShort& from);
  void MergeFrom(const VectorShort& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorShort* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.VectorShort";
  }
  protected:
  explicit VectorShort(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated sint32 val = 3 [packed = true];
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_val() const;
  void _internal_add_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 val(int index) const;
  void set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_val();

  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.VectorShort)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > val_;
  mutable std::atomic<int> _val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VectorInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.VectorInt) */ {
 public:
  inline VectorInt() : VectorInt(nullptr) {}
  ~VectorInt() override;
  explicit constexpr VectorInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorInt(const VectorInt& from);
  VectorInt(VectorInt&& from) noexcept
    : VectorInt() {
    *this = ::std::move(from);
  }

  inline VectorInt& operator=(const VectorInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorInt& operator=(VectorInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorInt* internal_default_instance() {
    return reinterpret_cast<const VectorInt*>(
               &_VectorInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(VectorInt& a, VectorInt& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorInt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorInt* New() const final {
    return new VectorInt();
  }

  VectorInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorInt& from);
  void MergeFrom(const VectorInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.VectorInt";
  }
  protected:
  explicit VectorInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated sfixed32 val = 3 [packed = true];
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_val() const;
  void _internal_add_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 val(int index) const;
  void set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_val();

  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.VectorInt)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VectorEnum final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.VectorEnum) */ {
 public:
  inline VectorEnum() : VectorEnum(nullptr) {}
  ~VectorEnum() override;
  explicit constexpr VectorEnum(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorEnum(const VectorEnum& from);
  VectorEnum(VectorEnum&& from) noexcept
    : VectorEnum() {
    *this = ::std::move(from);
  }

  inline VectorEnum& operator=(const VectorEnum& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorEnum& operator=(VectorEnum&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorEnum& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorEnum* internal_default_instance() {
    return reinterpret_cast<const VectorEnum*>(
               &_VectorEnum_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(VectorEnum& a, VectorEnum& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorEnum* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorEnum* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorEnum* New() const final {
    return new VectorEnum();
  }

  VectorEnum* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorEnum>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorEnum& from);
  void MergeFrom(const VectorEnum& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorEnum* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.VectorEnum";
  }
  protected:
  explicit VectorEnum(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated sint32 val = 3 [packed = true];
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_val() const;
  void _internal_add_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_val();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 val(int index) const;
  void set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_val();

  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.VectorEnum)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > val_;
  mutable std::atomic<int> _val_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VectorFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.VectorFloat) */ {
 public:
  inline VectorFloat() : VectorFloat(nullptr) {}
  ~VectorFloat() override;
  explicit constexpr VectorFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorFloat(const VectorFloat& from);
  VectorFloat(VectorFloat&& from) noexcept
    : VectorFloat() {
    *this = ::std::move(from);
  }

  inline VectorFloat& operator=(const VectorFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorFloat& operator=(VectorFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorFloat* internal_default_instance() {
    return reinterpret_cast<const VectorFloat*>(
               &_VectorFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(VectorFloat& a, VectorFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorFloat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorFloat* New() const final {
    return new VectorFloat();
  }

  VectorFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorFloat& from);
  void MergeFrom(const VectorFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.VectorFloat";
  }
  protected:
  explicit VectorFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated float val = 3 [packed = true];
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  float _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_val() const;
  void _internal_add_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_val();
  public:
  float val(int index) const;
  void set_val(int index, float value);
  void add_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_val();

  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.VectorFloat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class VectorDouble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.VectorDouble) */ {
 public:
  inline VectorDouble() : VectorDouble(nullptr) {}
  ~VectorDouble() override;
  explicit constexpr VectorDouble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  VectorDouble(const VectorDouble& from);
  VectorDouble(VectorDouble&& from) noexcept
    : VectorDouble() {
    *this = ::std::move(from);
  }

  inline VectorDouble& operator=(const VectorDouble& from) {
    CopyFrom(from);
    return *this;
  }
  inline VectorDouble& operator=(VectorDouble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const VectorDouble& default_instance() {
    return *internal_default_instance();
  }
  static inline const VectorDouble* internal_default_instance() {
    return reinterpret_cast<const VectorDouble*>(
               &_VectorDouble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(VectorDouble& a, VectorDouble& b) {
    a.Swap(&b);
  }
  inline void Swap(VectorDouble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VectorDouble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VectorDouble* New() const final {
    return new VectorDouble();
  }

  VectorDouble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VectorDouble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VectorDouble& from);
  void MergeFrom(const VectorDouble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VectorDouble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.VectorDouble";
  }
  protected:
  explicit VectorDouble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValFieldNumber = 3,
    kFieldvaluesFieldNumber = 7,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
  };
  // repeated double val = 3 [packed = true];
  int val_size() const;
  private:
  int _internal_val_size() const;
  public:
  void clear_val();
  private:
  double _internal_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      _internal_val() const;
  void _internal_add_val(double value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      _internal_mutable_val();
  public:
  double val(int index) const;
  void set_val(int index, double value);
  void add_val(double value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
      val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
      mutable_val();

  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.VectorDouble)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< double > val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class V4GenericBytes final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.V4GenericBytes) */ {
 public:
  inline V4GenericBytes() : V4GenericBytes(nullptr) {}
  ~V4GenericBytes() override;
  explicit constexpr V4GenericBytes(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  V4GenericBytes(const V4GenericBytes& from);
  V4GenericBytes(V4GenericBytes&& from) noexcept
    : V4GenericBytes() {
    *this = ::std::move(from);
  }

  inline V4GenericBytes& operator=(const V4GenericBytes& from) {
    CopyFrom(from);
    return *this;
  }
  inline V4GenericBytes& operator=(V4GenericBytes&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const V4GenericBytes& default_instance() {
    return *internal_default_instance();
  }
  static inline const V4GenericBytes* internal_default_instance() {
    return reinterpret_cast<const V4GenericBytes*>(
               &_V4GenericBytes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(V4GenericBytes& a, V4GenericBytes& b) {
    a.Swap(&b);
  }
  inline void Swap(V4GenericBytes* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(V4GenericBytes* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline V4GenericBytes* New() const final {
    return new V4GenericBytes();
  }

  V4GenericBytes* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<V4GenericBytes>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const V4GenericBytes& from);
  void MergeFrom(const V4GenericBytes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(V4GenericBytes* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.V4GenericBytes";
  }
  protected:
  explicit V4GenericBytes(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFieldvaluesFieldNumber = 7,
    kValFieldNumber = 3,
    kSecondsintoyearFieldNumber = 1,
    kNanoFieldNumber = 2,
    kSeverityFieldNumber = 4,
    kStatusFieldNumber = 5,
    kRepeatcountFieldNumber = 6,
    kFieldactualchangeFieldNumber = 8,
    kUserTagFieldNumber = 9,
  };
  // repeated .EPICS.FieldValue fieldvalues = 7;
  int fieldvalues_size() const;
  private:
  int _internal_fieldvalues_size() const;
  public:
  void clear_fieldvalues();
  ::EPICS::FieldValue* mutable_fieldvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_fieldvalues();
  private:
  const ::EPICS::FieldValue& _internal_fieldvalues(int index) const;
  ::EPICS::FieldValue* _internal_add_fieldvalues();
  public:
  const ::EPICS::FieldValue& fieldvalues(int index) const;
  ::EPICS::FieldValue* add_fieldvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      fieldvalues() const;

  // required bytes val = 3;
  bool has_val() const;
  private:
  bool _internal_has_val() const;
  public:
  void clear_val();
  const std::string& val() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_val(ArgT0&& arg0, ArgT... args);
  std::string* mutable_val();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_val();
  void set_allocated_val(std::string* val);
  private:
  const std::string& _internal_val() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_val(const std::string& value);
  std::string* _internal_mutable_val();
  public:

  // required uint32 secondsintoyear = 1;
  bool has_secondsintoyear() const;
  private:
  bool _internal_has_secondsintoyear() const;
  public:
  void clear_secondsintoyear();
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear() const;
  void set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_secondsintoyear() const;
  void _internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nano = 2;
  bool has_nano() const;
  private:
  bool _internal_has_nano() const;
  public:
  void clear_nano();
  ::PROTOBUF_NAMESPACE_ID::uint32 nano() const;
  void set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nano() const;
  void _internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional int32 severity = 4 [default = 0];
  bool has_severity() const;
  private:
  bool _internal_has_severity() const;
  public:
  void clear_severity();
  ::PROTOBUF_NAMESPACE_ID::int32 severity() const;
  void set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_severity() const;
  void _internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 5 [default = 0];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 repeatcount = 6;
  bool has_repeatcount() const;
  private:
  bool _internal_has_repeatcount() const;
  public:
  void clear_repeatcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount() const;
  void set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_repeatcount() const;
  void _internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional bool fieldactualchange = 8;
  bool has_fieldactualchange() const;
  private:
  bool _internal_has_fieldactualchange() const;
  public:
  void clear_fieldactualchange();
  bool fieldactualchange() const;
  void set_fieldactualchange(bool value);
  private:
  bool _internal_fieldactualchange() const;
  void _internal_set_fieldactualchange(bool value);
  public:

  // optional uint32 userTag = 9;
  bool has_usertag() const;
  private:
  bool _internal_has_usertag() const;
  public:
  void clear_usertag();
  ::PROTOBUF_NAMESPACE_ID::uint32 usertag() const;
  void set_usertag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_usertag() const;
  void _internal_set_usertag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.V4GenericBytes)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > fieldvalues_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr val_;
  ::PROTOBUF_NAMESPACE_ID::uint32 secondsintoyear_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nano_;
  ::PROTOBUF_NAMESPACE_ID::int32 severity_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 repeatcount_;
  bool fieldactualchange_;
  ::PROTOBUF_NAMESPACE_ID::uint32 usertag_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// -------------------------------------------------------------------

class PayloadInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EPICS.PayloadInfo) */ {
 public:
  inline PayloadInfo() : PayloadInfo(nullptr) {}
  ~PayloadInfo() override;
  explicit constexpr PayloadInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PayloadInfo(const PayloadInfo& from);
  PayloadInfo(PayloadInfo&& from) noexcept
    : PayloadInfo() {
    *this = ::std::move(from);
  }

  inline PayloadInfo& operator=(const PayloadInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PayloadInfo& operator=(PayloadInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PayloadInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PayloadInfo* internal_default_instance() {
    return reinterpret_cast<const PayloadInfo*>(
               &_PayloadInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PayloadInfo& a, PayloadInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PayloadInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PayloadInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PayloadInfo* New() const final {
    return new PayloadInfo();
  }

  PayloadInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PayloadInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PayloadInfo& from);
  void MergeFrom(const PayloadInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PayloadInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EPICS.PayloadInfo";
  }
  protected:
  explicit PayloadInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 15,
    kPvnameFieldNumber = 2,
    kUnused09FieldNumber = 14,
    kTypeFieldNumber = 1,
    kYearFieldNumber = 3,
    kUnused00FieldNumber = 5,
    kUnused01FieldNumber = 6,
    kUnused02FieldNumber = 7,
    kUnused03FieldNumber = 8,
    kUnused04FieldNumber = 9,
    kUnused05FieldNumber = 10,
    kUnused06FieldNumber = 11,
    kUnused07FieldNumber = 12,
    kUnused08FieldNumber = 13,
    kElementCountFieldNumber = 4,
  };
  // repeated .EPICS.FieldValue headers = 15;
  int headers_size() const;
  private:
  int _internal_headers_size() const;
  public:
  void clear_headers();
  ::EPICS::FieldValue* mutable_headers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
      mutable_headers();
  private:
  const ::EPICS::FieldValue& _internal_headers(int index) const;
  ::EPICS::FieldValue* _internal_add_headers();
  public:
  const ::EPICS::FieldValue& headers(int index) const;
  ::EPICS::FieldValue* add_headers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
      headers() const;

  // required string pvname = 2;
  bool has_pvname() const;
  private:
  bool _internal_has_pvname() const;
  public:
  void clear_pvname();
  const std::string& pvname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pvname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pvname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pvname();
  void set_allocated_pvname(std::string* pvname);
  private:
  const std::string& _internal_pvname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pvname(const std::string& value);
  std::string* _internal_mutable_pvname();
  public:

  // optional string unused09 = 14;
  bool has_unused09() const;
  private:
  bool _internal_has_unused09() const;
  public:
  void clear_unused09();
  const std::string& unused09() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_unused09(ArgT0&& arg0, ArgT... args);
  std::string* mutable_unused09();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_unused09();
  void set_allocated_unused09(std::string* unused09);
  private:
  const std::string& _internal_unused09() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_unused09(const std::string& value);
  std::string* _internal_mutable_unused09();
  public:

  // required .EPICS.PayloadType type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::EPICS::PayloadType type() const;
  void set_type(::EPICS::PayloadType value);
  private:
  ::EPICS::PayloadType _internal_type() const;
  void _internal_set_type(::EPICS::PayloadType value);
  public:

  // required int32 year = 3;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional double unused00 = 5;
  bool has_unused00() const;
  private:
  bool _internal_has_unused00() const;
  public:
  void clear_unused00();
  double unused00() const;
  void set_unused00(double value);
  private:
  double _internal_unused00() const;
  void _internal_set_unused00(double value);
  public:

  // optional double unused01 = 6;
  bool has_unused01() const;
  private:
  bool _internal_has_unused01() const;
  public:
  void clear_unused01();
  double unused01() const;
  void set_unused01(double value);
  private:
  double _internal_unused01() const;
  void _internal_set_unused01(double value);
  public:

  // optional double unused02 = 7;
  bool has_unused02() const;
  private:
  bool _internal_has_unused02() const;
  public:
  void clear_unused02();
  double unused02() const;
  void set_unused02(double value);
  private:
  double _internal_unused02() const;
  void _internal_set_unused02(double value);
  public:

  // optional double unused03 = 8;
  bool has_unused03() const;
  private:
  bool _internal_has_unused03() const;
  public:
  void clear_unused03();
  double unused03() const;
  void set_unused03(double value);
  private:
  double _internal_unused03() const;
  void _internal_set_unused03(double value);
  public:

  // optional double unused04 = 9;
  bool has_unused04() const;
  private:
  bool _internal_has_unused04() const;
  public:
  void clear_unused04();
  double unused04() const;
  void set_unused04(double value);
  private:
  double _internal_unused04() const;
  void _internal_set_unused04(double value);
  public:

  // optional double unused05 = 10;
  bool has_unused05() const;
  private:
  bool _internal_has_unused05() const;
  public:
  void clear_unused05();
  double unused05() const;
  void set_unused05(double value);
  private:
  double _internal_unused05() const;
  void _internal_set_unused05(double value);
  public:

  // optional double unused06 = 11;
  bool has_unused06() const;
  private:
  bool _internal_has_unused06() const;
  public:
  void clear_unused06();
  double unused06() const;
  void set_unused06(double value);
  private:
  double _internal_unused06() const;
  void _internal_set_unused06(double value);
  public:

  // optional double unused07 = 12;
  bool has_unused07() const;
  private:
  bool _internal_has_unused07() const;
  public:
  void clear_unused07();
  double unused07() const;
  void set_unused07(double value);
  private:
  double _internal_unused07() const;
  void _internal_set_unused07(double value);
  public:

  // optional double unused08 = 13;
  bool has_unused08() const;
  private:
  bool _internal_has_unused08() const;
  public:
  void clear_unused08();
  double unused08() const;
  void set_unused08(double value);
  private:
  double _internal_unused08() const;
  void _internal_set_unused08(double value);
  public:

  // optional int32 elementCount = 4;
  bool has_elementcount() const;
  private:
  bool _internal_has_elementcount() const;
  public:
  void clear_elementcount();
  ::PROTOBUF_NAMESPACE_ID::int32 elementcount() const;
  void set_elementcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_elementcount() const;
  void _internal_set_elementcount(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:EPICS.PayloadInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue > headers_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pvname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr unused09_;
  int type_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  double unused00_;
  double unused01_;
  double unused02_;
  double unused03_;
  double unused04_;
  double unused05_;
  double unused06_;
  double unused07_;
  double unused08_;
  ::PROTOBUF_NAMESPACE_ID::int32 elementcount_;
  friend struct ::TableStruct_epics_5fevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FieldValue

// required string name = 1;
inline bool FieldValue::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FieldValue::has_name() const {
  return _internal_has_name();
}
inline void FieldValue::clear_name() {
  name_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FieldValue::name() const {
  // @@protoc_insertion_point(field_get:EPICS.FieldValue.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldValue::set_name(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.FieldValue.name)
}
inline std::string* FieldValue::mutable_name() {
  // @@protoc_insertion_point(field_mutable:EPICS.FieldValue.name)
  return _internal_mutable_name();
}
inline const std::string& FieldValue::_internal_name() const {
  return name_.Get();
}
inline void FieldValue::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldValue::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldValue::release_name() {
  // @@protoc_insertion_point(field_release:EPICS.FieldValue.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldValue::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.FieldValue.name)
}

// required string val = 2;
inline bool FieldValue::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FieldValue::has_val() const {
  return _internal_has_val();
}
inline void FieldValue::clear_val() {
  val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& FieldValue::val() const {
  // @@protoc_insertion_point(field_get:EPICS.FieldValue.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FieldValue::set_val(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.FieldValue.val)
}
inline std::string* FieldValue::mutable_val() {
  // @@protoc_insertion_point(field_mutable:EPICS.FieldValue.val)
  return _internal_mutable_val();
}
inline const std::string& FieldValue::_internal_val() const {
  return val_.Get();
}
inline void FieldValue::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FieldValue::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000002u;
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FieldValue::release_val() {
  // @@protoc_insertion_point(field_release:EPICS.FieldValue.val)
  if (!_internal_has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FieldValue::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.FieldValue.val)
}

// -------------------------------------------------------------------

// ScalarString

// required uint32 secondsintoyear = 1;
inline bool ScalarString::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarString::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void ScalarString::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarString::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarString::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void ScalarString::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  secondsintoyear_ = value;
}
inline void ScalarString::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarString.secondsintoyear)
}

// required uint32 nano = 2;
inline bool ScalarString::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarString::has_nano() const {
  return _internal_has_nano();
}
inline void ScalarString::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarString::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarString::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.nano)
  return _internal_nano();
}
inline void ScalarString::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nano_ = value;
}
inline void ScalarString::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarString.nano)
}

// required string val = 3;
inline bool ScalarString::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarString::has_val() const {
  return _internal_has_val();
}
inline void ScalarString::clear_val() {
  val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScalarString::val() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScalarString::set_val(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.ScalarString.val)
}
inline std::string* ScalarString::mutable_val() {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarString.val)
  return _internal_mutable_val();
}
inline const std::string& ScalarString::_internal_val() const {
  return val_.Get();
}
inline void ScalarString::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScalarString::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000001u;
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScalarString::release_val() {
  // @@protoc_insertion_point(field_release:EPICS.ScalarString.val)
  if (!_internal_has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScalarString::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.ScalarString.val)
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarString::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarString::has_severity() const {
  return _internal_has_severity();
}
inline void ScalarString::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarString::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarString::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.severity)
  return _internal_severity();
}
inline void ScalarString::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void ScalarString::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarString.severity)
}

// optional int32 status = 5 [default = 0];
inline bool ScalarString::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarString::has_status() const {
  return _internal_has_status();
}
inline void ScalarString::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarString::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarString::status() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.status)
  return _internal_status();
}
inline void ScalarString::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void ScalarString::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarString.status)
}

// optional uint32 repeatcount = 6;
inline bool ScalarString::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScalarString::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void ScalarString::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarString::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarString::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.repeatcount)
  return _internal_repeatcount();
}
inline void ScalarString::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void ScalarString::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarString.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarString::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int ScalarString::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void ScalarString::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* ScalarString::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarString.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarString::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.ScalarString.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& ScalarString::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& ScalarString::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* ScalarString::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* ScalarString::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.ScalarString.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarString::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.ScalarString.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarString::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScalarString::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void ScalarString::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ScalarString::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool ScalarString::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarString.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void ScalarString::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void ScalarString::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarString.fieldactualchange)
}

// -------------------------------------------------------------------

// ScalarByte

// required uint32 secondsintoyear = 1;
inline bool ScalarByte::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarByte::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void ScalarByte::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarByte::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarByte::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void ScalarByte::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  secondsintoyear_ = value;
}
inline void ScalarByte::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarByte.secondsintoyear)
}

// required uint32 nano = 2;
inline bool ScalarByte::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarByte::has_nano() const {
  return _internal_has_nano();
}
inline void ScalarByte::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarByte::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarByte::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.nano)
  return _internal_nano();
}
inline void ScalarByte::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nano_ = value;
}
inline void ScalarByte::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarByte.nano)
}

// required bytes val = 3;
inline bool ScalarByte::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarByte::has_val() const {
  return _internal_has_val();
}
inline void ScalarByte::clear_val() {
  val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ScalarByte::val() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ScalarByte::set_val(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 val_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.ScalarByte.val)
}
inline std::string* ScalarByte::mutable_val() {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarByte.val)
  return _internal_mutable_val();
}
inline const std::string& ScalarByte::_internal_val() const {
  return val_.Get();
}
inline void ScalarByte::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ScalarByte::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000001u;
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ScalarByte::release_val() {
  // @@protoc_insertion_point(field_release:EPICS.ScalarByte.val)
  if (!_internal_has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ScalarByte::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.ScalarByte.val)
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarByte::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarByte::has_severity() const {
  return _internal_has_severity();
}
inline void ScalarByte::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarByte::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarByte::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.severity)
  return _internal_severity();
}
inline void ScalarByte::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void ScalarByte::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarByte.severity)
}

// optional int32 status = 5 [default = 0];
inline bool ScalarByte::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarByte::has_status() const {
  return _internal_has_status();
}
inline void ScalarByte::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarByte::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarByte::status() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.status)
  return _internal_status();
}
inline void ScalarByte::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void ScalarByte::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarByte.status)
}

// optional uint32 repeatcount = 6;
inline bool ScalarByte::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScalarByte::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void ScalarByte::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarByte::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarByte::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.repeatcount)
  return _internal_repeatcount();
}
inline void ScalarByte::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void ScalarByte::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarByte.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarByte::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int ScalarByte::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void ScalarByte::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* ScalarByte::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarByte.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarByte::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.ScalarByte.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& ScalarByte::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& ScalarByte::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* ScalarByte::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* ScalarByte::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.ScalarByte.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarByte::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.ScalarByte.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarByte::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScalarByte::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void ScalarByte::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ScalarByte::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool ScalarByte::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarByte.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void ScalarByte::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void ScalarByte::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarByte.fieldactualchange)
}

// -------------------------------------------------------------------

// ScalarShort

// required uint32 secondsintoyear = 1;
inline bool ScalarShort::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarShort::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void ScalarShort::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarShort::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarShort::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void ScalarShort::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void ScalarShort::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarShort.secondsintoyear)
}

// required uint32 nano = 2;
inline bool ScalarShort::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarShort::has_nano() const {
  return _internal_has_nano();
}
inline void ScalarShort::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarShort::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarShort::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.nano)
  return _internal_nano();
}
inline void ScalarShort::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void ScalarShort::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarShort.nano)
}

// required sint32 val = 3;
inline bool ScalarShort::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarShort::has_val() const {
  return _internal_has_val();
}
inline void ScalarShort::clear_val() {
  val_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarShort::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarShort::val() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.val)
  return _internal_val();
}
inline void ScalarShort::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  val_ = value;
}
inline void ScalarShort::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarShort.val)
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarShort::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarShort::has_severity() const {
  return _internal_has_severity();
}
inline void ScalarShort::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarShort::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarShort::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.severity)
  return _internal_severity();
}
inline void ScalarShort::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void ScalarShort::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarShort.severity)
}

// optional int32 status = 5 [default = 0];
inline bool ScalarShort::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarShort::has_status() const {
  return _internal_has_status();
}
inline void ScalarShort::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarShort::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarShort::status() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.status)
  return _internal_status();
}
inline void ScalarShort::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void ScalarShort::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarShort.status)
}

// optional uint32 repeatcount = 6;
inline bool ScalarShort::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScalarShort::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void ScalarShort::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarShort::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarShort::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.repeatcount)
  return _internal_repeatcount();
}
inline void ScalarShort::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void ScalarShort::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarShort.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarShort::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int ScalarShort::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void ScalarShort::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* ScalarShort::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarShort.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarShort::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.ScalarShort.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& ScalarShort::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& ScalarShort::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* ScalarShort::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* ScalarShort::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.ScalarShort.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarShort::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.ScalarShort.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarShort::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScalarShort::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void ScalarShort::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ScalarShort::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool ScalarShort::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarShort.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void ScalarShort::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void ScalarShort::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarShort.fieldactualchange)
}

// -------------------------------------------------------------------

// ScalarInt

// required uint32 secondsintoyear = 1;
inline bool ScalarInt::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarInt::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void ScalarInt::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarInt::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarInt::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void ScalarInt::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void ScalarInt::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarInt.secondsintoyear)
}

// required uint32 nano = 2;
inline bool ScalarInt::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarInt::has_nano() const {
  return _internal_has_nano();
}
inline void ScalarInt::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarInt::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarInt::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.nano)
  return _internal_nano();
}
inline void ScalarInt::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void ScalarInt::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarInt.nano)
}

// required sfixed32 val = 3;
inline bool ScalarInt::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarInt::has_val() const {
  return _internal_has_val();
}
inline void ScalarInt::clear_val() {
  val_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarInt::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarInt::val() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.val)
  return _internal_val();
}
inline void ScalarInt::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  val_ = value;
}
inline void ScalarInt::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarInt.val)
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarInt::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarInt::has_severity() const {
  return _internal_has_severity();
}
inline void ScalarInt::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarInt::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarInt::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.severity)
  return _internal_severity();
}
inline void ScalarInt::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void ScalarInt::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarInt.severity)
}

// optional int32 status = 5 [default = 0];
inline bool ScalarInt::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarInt::has_status() const {
  return _internal_has_status();
}
inline void ScalarInt::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarInt::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarInt::status() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.status)
  return _internal_status();
}
inline void ScalarInt::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void ScalarInt::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarInt.status)
}

// optional uint32 repeatcount = 6;
inline bool ScalarInt::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScalarInt::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void ScalarInt::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarInt::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarInt::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.repeatcount)
  return _internal_repeatcount();
}
inline void ScalarInt::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void ScalarInt::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarInt.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarInt::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int ScalarInt::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void ScalarInt::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* ScalarInt::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarInt.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarInt::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.ScalarInt.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& ScalarInt::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& ScalarInt::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* ScalarInt::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* ScalarInt::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.ScalarInt.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarInt::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.ScalarInt.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarInt::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScalarInt::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void ScalarInt::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ScalarInt::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool ScalarInt::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarInt.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void ScalarInt::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void ScalarInt::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarInt.fieldactualchange)
}

// -------------------------------------------------------------------

// ScalarEnum

// required uint32 secondsintoyear = 1;
inline bool ScalarEnum::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarEnum::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void ScalarEnum::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarEnum::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarEnum::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void ScalarEnum::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void ScalarEnum::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarEnum.secondsintoyear)
}

// required uint32 nano = 2;
inline bool ScalarEnum::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarEnum::has_nano() const {
  return _internal_has_nano();
}
inline void ScalarEnum::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarEnum::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarEnum::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.nano)
  return _internal_nano();
}
inline void ScalarEnum::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void ScalarEnum::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarEnum.nano)
}

// required sint32 val = 3;
inline bool ScalarEnum::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarEnum::has_val() const {
  return _internal_has_val();
}
inline void ScalarEnum::clear_val() {
  val_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarEnum::_internal_val() const {
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarEnum::val() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.val)
  return _internal_val();
}
inline void ScalarEnum::_internal_set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  val_ = value;
}
inline void ScalarEnum::set_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarEnum.val)
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarEnum::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarEnum::has_severity() const {
  return _internal_has_severity();
}
inline void ScalarEnum::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarEnum::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarEnum::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.severity)
  return _internal_severity();
}
inline void ScalarEnum::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void ScalarEnum::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarEnum.severity)
}

// optional int32 status = 5 [default = 0];
inline bool ScalarEnum::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarEnum::has_status() const {
  return _internal_has_status();
}
inline void ScalarEnum::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarEnum::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarEnum::status() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.status)
  return _internal_status();
}
inline void ScalarEnum::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void ScalarEnum::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarEnum.status)
}

// optional uint32 repeatcount = 6;
inline bool ScalarEnum::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScalarEnum::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void ScalarEnum::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarEnum::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarEnum::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.repeatcount)
  return _internal_repeatcount();
}
inline void ScalarEnum::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void ScalarEnum::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarEnum.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarEnum::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int ScalarEnum::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void ScalarEnum::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* ScalarEnum::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarEnum.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarEnum::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.ScalarEnum.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& ScalarEnum::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& ScalarEnum::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* ScalarEnum::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* ScalarEnum::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.ScalarEnum.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarEnum::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.ScalarEnum.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarEnum::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScalarEnum::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void ScalarEnum::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ScalarEnum::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool ScalarEnum::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarEnum.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void ScalarEnum::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void ScalarEnum::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarEnum.fieldactualchange)
}

// -------------------------------------------------------------------

// ScalarFloat

// required uint32 secondsintoyear = 1;
inline bool ScalarFloat::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarFloat::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void ScalarFloat::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarFloat::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarFloat::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void ScalarFloat::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void ScalarFloat::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarFloat.secondsintoyear)
}

// required uint32 nano = 2;
inline bool ScalarFloat::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarFloat::has_nano() const {
  return _internal_has_nano();
}
inline void ScalarFloat::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarFloat::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarFloat::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.nano)
  return _internal_nano();
}
inline void ScalarFloat::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void ScalarFloat::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarFloat.nano)
}

// required float val = 3;
inline bool ScalarFloat::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarFloat::has_val() const {
  return _internal_has_val();
}
inline void ScalarFloat::clear_val() {
  val_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float ScalarFloat::_internal_val() const {
  return val_;
}
inline float ScalarFloat::val() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.val)
  return _internal_val();
}
inline void ScalarFloat::_internal_set_val(float value) {
  _has_bits_[0] |= 0x00000004u;
  val_ = value;
}
inline void ScalarFloat::set_val(float value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarFloat.val)
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarFloat::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarFloat::has_severity() const {
  return _internal_has_severity();
}
inline void ScalarFloat::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarFloat::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarFloat::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.severity)
  return _internal_severity();
}
inline void ScalarFloat::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void ScalarFloat::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarFloat.severity)
}

// optional int32 status = 5 [default = 0];
inline bool ScalarFloat::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarFloat::has_status() const {
  return _internal_has_status();
}
inline void ScalarFloat::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarFloat::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarFloat::status() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.status)
  return _internal_status();
}
inline void ScalarFloat::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void ScalarFloat::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarFloat.status)
}

// optional uint32 repeatcount = 6;
inline bool ScalarFloat::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScalarFloat::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void ScalarFloat::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarFloat::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarFloat::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.repeatcount)
  return _internal_repeatcount();
}
inline void ScalarFloat::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void ScalarFloat::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarFloat.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarFloat::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int ScalarFloat::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void ScalarFloat::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* ScalarFloat::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarFloat.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarFloat::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.ScalarFloat.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& ScalarFloat::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& ScalarFloat::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* ScalarFloat::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* ScalarFloat::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.ScalarFloat.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarFloat::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.ScalarFloat.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarFloat::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScalarFloat::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void ScalarFloat::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ScalarFloat::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool ScalarFloat::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarFloat.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void ScalarFloat::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void ScalarFloat::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarFloat.fieldactualchange)
}

// -------------------------------------------------------------------

// ScalarDouble

// required uint32 secondsintoyear = 1;
inline bool ScalarDouble::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ScalarDouble::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void ScalarDouble::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarDouble::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarDouble::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void ScalarDouble::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void ScalarDouble::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarDouble.secondsintoyear)
}

// required uint32 nano = 2;
inline bool ScalarDouble::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ScalarDouble::has_nano() const {
  return _internal_has_nano();
}
inline void ScalarDouble::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarDouble::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarDouble::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.nano)
  return _internal_nano();
}
inline void ScalarDouble::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void ScalarDouble::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarDouble.nano)
}

// required double val = 3;
inline bool ScalarDouble::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ScalarDouble::has_val() const {
  return _internal_has_val();
}
inline void ScalarDouble::clear_val() {
  val_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double ScalarDouble::_internal_val() const {
  return val_;
}
inline double ScalarDouble::val() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.val)
  return _internal_val();
}
inline void ScalarDouble::_internal_set_val(double value) {
  _has_bits_[0] |= 0x00000004u;
  val_ = value;
}
inline void ScalarDouble::set_val(double value) {
  _internal_set_val(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarDouble.val)
}

// optional int32 severity = 4 [default = 0];
inline bool ScalarDouble::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ScalarDouble::has_severity() const {
  return _internal_has_severity();
}
inline void ScalarDouble::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarDouble::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarDouble::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.severity)
  return _internal_severity();
}
inline void ScalarDouble::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void ScalarDouble::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarDouble.severity)
}

// optional int32 status = 5 [default = 0];
inline bool ScalarDouble::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ScalarDouble::has_status() const {
  return _internal_has_status();
}
inline void ScalarDouble::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarDouble::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ScalarDouble::status() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.status)
  return _internal_status();
}
inline void ScalarDouble::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void ScalarDouble::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarDouble.status)
}

// optional uint32 repeatcount = 6;
inline bool ScalarDouble::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ScalarDouble::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void ScalarDouble::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarDouble::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ScalarDouble::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.repeatcount)
  return _internal_repeatcount();
}
inline void ScalarDouble::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void ScalarDouble::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarDouble.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int ScalarDouble::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int ScalarDouble::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void ScalarDouble::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* ScalarDouble::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.ScalarDouble.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
ScalarDouble::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.ScalarDouble.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& ScalarDouble::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& ScalarDouble::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* ScalarDouble::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* ScalarDouble::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.ScalarDouble.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
ScalarDouble::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.ScalarDouble.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool ScalarDouble::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ScalarDouble::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void ScalarDouble::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool ScalarDouble::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool ScalarDouble::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.ScalarDouble.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void ScalarDouble::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void ScalarDouble::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.ScalarDouble.fieldactualchange)
}

// -------------------------------------------------------------------

// VectorString

// required uint32 secondsintoyear = 1;
inline bool VectorString::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorString::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void VectorString::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorString::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorString::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void VectorString::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void VectorString::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorString.secondsintoyear)
}

// required uint32 nano = 2;
inline bool VectorString::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorString::has_nano() const {
  return _internal_has_nano();
}
inline void VectorString::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorString::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorString::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.nano)
  return _internal_nano();
}
inline void VectorString::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void VectorString::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorString.nano)
}

// repeated string val = 3;
inline int VectorString::_internal_val_size() const {
  return val_.size();
}
inline int VectorString::val_size() const {
  return _internal_val_size();
}
inline void VectorString::clear_val() {
  val_.Clear();
}
inline std::string* VectorString::add_val() {
  // @@protoc_insertion_point(field_add_mutable:EPICS.VectorString.val)
  return _internal_add_val();
}
inline const std::string& VectorString::_internal_val(int index) const {
  return val_.Get(index);
}
inline const std::string& VectorString::val(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.val)
  return _internal_val(index);
}
inline std::string* VectorString::mutable_val(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorString.val)
  return val_.Mutable(index);
}
inline void VectorString::set_val(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:EPICS.VectorString.val)
  val_.Mutable(index)->assign(value);
}
inline void VectorString::set_val(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:EPICS.VectorString.val)
  val_.Mutable(index)->assign(std::move(value));
}
inline void VectorString::set_val(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  val_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:EPICS.VectorString.val)
}
inline void VectorString::set_val(int index, const char* value, size_t size) {
  val_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:EPICS.VectorString.val)
}
inline std::string* VectorString::_internal_add_val() {
  return val_.Add();
}
inline void VectorString::add_val(const std::string& value) {
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:EPICS.VectorString.val)
}
inline void VectorString::add_val(std::string&& value) {
  val_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:EPICS.VectorString.val)
}
inline void VectorString::add_val(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  val_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:EPICS.VectorString.val)
}
inline void VectorString::add_val(const char* value, size_t size) {
  val_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:EPICS.VectorString.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
VectorString::val() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorString.val)
  return val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
VectorString::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorString.val)
  return &val_;
}

// optional int32 severity = 4 [default = 0];
inline bool VectorString::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VectorString::has_severity() const {
  return _internal_has_severity();
}
inline void VectorString::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorString::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorString::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.severity)
  return _internal_severity();
}
inline void VectorString::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  severity_ = value;
}
inline void VectorString::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorString.severity)
}

// optional int32 status = 5 [default = 0];
inline bool VectorString::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VectorString::has_status() const {
  return _internal_has_status();
}
inline void VectorString::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorString::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorString::status() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.status)
  return _internal_status();
}
inline void VectorString::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void VectorString::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorString.status)
}

// optional uint32 repeatcount = 6;
inline bool VectorString::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VectorString::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void VectorString::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorString::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorString::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.repeatcount)
  return _internal_repeatcount();
}
inline void VectorString::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  repeatcount_ = value;
}
inline void VectorString::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorString.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorString::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int VectorString::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void VectorString::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* VectorString::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorString.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
VectorString::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorString.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& VectorString::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& VectorString::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* VectorString::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* VectorString::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.VectorString.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
VectorString::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorString.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorString::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VectorString::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void VectorString::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VectorString::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool VectorString::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorString.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void VectorString::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fieldactualchange_ = value;
}
inline void VectorString::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorString.fieldactualchange)
}

// -------------------------------------------------------------------

// VectorChar

// required uint32 secondsintoyear = 1;
inline bool VectorChar::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorChar::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void VectorChar::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorChar::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorChar::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void VectorChar::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  secondsintoyear_ = value;
}
inline void VectorChar::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorChar.secondsintoyear)
}

// required uint32 nano = 2;
inline bool VectorChar::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VectorChar::has_nano() const {
  return _internal_has_nano();
}
inline void VectorChar::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorChar::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorChar::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.nano)
  return _internal_nano();
}
inline void VectorChar::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nano_ = value;
}
inline void VectorChar::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorChar.nano)
}

// required bytes val = 3;
inline bool VectorChar::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorChar::has_val() const {
  return _internal_has_val();
}
inline void VectorChar::clear_val() {
  val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VectorChar::val() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void VectorChar::set_val(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 val_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.VectorChar.val)
}
inline std::string* VectorChar::mutable_val() {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorChar.val)
  return _internal_mutable_val();
}
inline const std::string& VectorChar::_internal_val() const {
  return val_.Get();
}
inline void VectorChar::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* VectorChar::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000001u;
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* VectorChar::release_val() {
  // @@protoc_insertion_point(field_release:EPICS.VectorChar.val)
  if (!_internal_has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void VectorChar::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.VectorChar.val)
}

// optional int32 severity = 4 [default = 0];
inline bool VectorChar::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VectorChar::has_severity() const {
  return _internal_has_severity();
}
inline void VectorChar::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorChar::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorChar::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.severity)
  return _internal_severity();
}
inline void VectorChar::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void VectorChar::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorChar.severity)
}

// optional int32 status = 5 [default = 0];
inline bool VectorChar::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VectorChar::has_status() const {
  return _internal_has_status();
}
inline void VectorChar::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorChar::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorChar::status() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.status)
  return _internal_status();
}
inline void VectorChar::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void VectorChar::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorChar.status)
}

// optional uint32 repeatcount = 6;
inline bool VectorChar::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VectorChar::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void VectorChar::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorChar::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorChar::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.repeatcount)
  return _internal_repeatcount();
}
inline void VectorChar::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void VectorChar::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorChar.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorChar::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int VectorChar::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void VectorChar::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* VectorChar::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorChar.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
VectorChar::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorChar.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& VectorChar::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& VectorChar::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* VectorChar::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* VectorChar::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.VectorChar.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
VectorChar::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorChar.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorChar::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VectorChar::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void VectorChar::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool VectorChar::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool VectorChar::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorChar.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void VectorChar::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void VectorChar::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorChar.fieldactualchange)
}

// -------------------------------------------------------------------

// VectorShort

// required uint32 secondsintoyear = 1;
inline bool VectorShort::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorShort::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void VectorShort::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorShort::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorShort::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void VectorShort::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void VectorShort::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorShort.secondsintoyear)
}

// required uint32 nano = 2;
inline bool VectorShort::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorShort::has_nano() const {
  return _internal_has_nano();
}
inline void VectorShort::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorShort::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorShort::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.nano)
  return _internal_nano();
}
inline void VectorShort::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void VectorShort::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorShort.nano)
}

// repeated sint32 val = 3 [packed = true];
inline int VectorShort::_internal_val_size() const {
  return val_.size();
}
inline int VectorShort::val_size() const {
  return _internal_val_size();
}
inline void VectorShort::clear_val() {
  val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorShort::_internal_val(int index) const {
  return val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorShort::val(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.val)
  return _internal_val(index);
}
inline void VectorShort::set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:EPICS.VectorShort.val)
}
inline void VectorShort::_internal_add_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Add(value);
}
inline void VectorShort::add_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:EPICS.VectorShort.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VectorShort::_internal_val() const {
  return val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VectorShort::val() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorShort.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VectorShort::_internal_mutable_val() {
  return &val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VectorShort::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorShort.val)
  return _internal_mutable_val();
}

// optional int32 severity = 4 [default = 0];
inline bool VectorShort::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VectorShort::has_severity() const {
  return _internal_has_severity();
}
inline void VectorShort::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorShort::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorShort::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.severity)
  return _internal_severity();
}
inline void VectorShort::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  severity_ = value;
}
inline void VectorShort::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorShort.severity)
}

// optional int32 status = 5 [default = 0];
inline bool VectorShort::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VectorShort::has_status() const {
  return _internal_has_status();
}
inline void VectorShort::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorShort::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorShort::status() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.status)
  return _internal_status();
}
inline void VectorShort::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void VectorShort::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorShort.status)
}

// optional uint32 repeatcount = 6;
inline bool VectorShort::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VectorShort::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void VectorShort::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorShort::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorShort::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.repeatcount)
  return _internal_repeatcount();
}
inline void VectorShort::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  repeatcount_ = value;
}
inline void VectorShort::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorShort.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorShort::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int VectorShort::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void VectorShort::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* VectorShort::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorShort.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
VectorShort::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorShort.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& VectorShort::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& VectorShort::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* VectorShort::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* VectorShort::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.VectorShort.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
VectorShort::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorShort.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorShort::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VectorShort::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void VectorShort::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VectorShort::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool VectorShort::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorShort.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void VectorShort::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fieldactualchange_ = value;
}
inline void VectorShort::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorShort.fieldactualchange)
}

// -------------------------------------------------------------------

// VectorInt

// required uint32 secondsintoyear = 1;
inline bool VectorInt::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorInt::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void VectorInt::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorInt::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorInt::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void VectorInt::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void VectorInt::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorInt.secondsintoyear)
}

// required uint32 nano = 2;
inline bool VectorInt::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorInt::has_nano() const {
  return _internal_has_nano();
}
inline void VectorInt::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorInt::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorInt::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.nano)
  return _internal_nano();
}
inline void VectorInt::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void VectorInt::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorInt.nano)
}

// repeated sfixed32 val = 3 [packed = true];
inline int VectorInt::_internal_val_size() const {
  return val_.size();
}
inline int VectorInt::val_size() const {
  return _internal_val_size();
}
inline void VectorInt::clear_val() {
  val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorInt::_internal_val(int index) const {
  return val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorInt::val(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.val)
  return _internal_val(index);
}
inline void VectorInt::set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:EPICS.VectorInt.val)
}
inline void VectorInt::_internal_add_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Add(value);
}
inline void VectorInt::add_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:EPICS.VectorInt.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VectorInt::_internal_val() const {
  return val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VectorInt::val() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorInt.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VectorInt::_internal_mutable_val() {
  return &val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VectorInt::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorInt.val)
  return _internal_mutable_val();
}

// optional int32 severity = 4 [default = 0];
inline bool VectorInt::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VectorInt::has_severity() const {
  return _internal_has_severity();
}
inline void VectorInt::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorInt::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorInt::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.severity)
  return _internal_severity();
}
inline void VectorInt::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  severity_ = value;
}
inline void VectorInt::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorInt.severity)
}

// optional int32 status = 5 [default = 0];
inline bool VectorInt::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VectorInt::has_status() const {
  return _internal_has_status();
}
inline void VectorInt::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorInt::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorInt::status() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.status)
  return _internal_status();
}
inline void VectorInt::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void VectorInt::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorInt.status)
}

// optional uint32 repeatcount = 6;
inline bool VectorInt::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VectorInt::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void VectorInt::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorInt::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorInt::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.repeatcount)
  return _internal_repeatcount();
}
inline void VectorInt::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  repeatcount_ = value;
}
inline void VectorInt::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorInt.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorInt::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int VectorInt::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void VectorInt::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* VectorInt::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorInt.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
VectorInt::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorInt.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& VectorInt::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& VectorInt::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* VectorInt::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* VectorInt::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.VectorInt.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
VectorInt::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorInt.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorInt::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VectorInt::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void VectorInt::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VectorInt::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool VectorInt::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorInt.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void VectorInt::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fieldactualchange_ = value;
}
inline void VectorInt::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorInt.fieldactualchange)
}

// -------------------------------------------------------------------

// VectorEnum

// required uint32 secondsintoyear = 1;
inline bool VectorEnum::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorEnum::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void VectorEnum::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorEnum::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorEnum::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void VectorEnum::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void VectorEnum::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorEnum.secondsintoyear)
}

// required uint32 nano = 2;
inline bool VectorEnum::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorEnum::has_nano() const {
  return _internal_has_nano();
}
inline void VectorEnum::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorEnum::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorEnum::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.nano)
  return _internal_nano();
}
inline void VectorEnum::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void VectorEnum::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorEnum.nano)
}

// repeated sint32 val = 3 [packed = true];
inline int VectorEnum::_internal_val_size() const {
  return val_.size();
}
inline int VectorEnum::val_size() const {
  return _internal_val_size();
}
inline void VectorEnum::clear_val() {
  val_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorEnum::_internal_val(int index) const {
  return val_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorEnum::val(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.val)
  return _internal_val(index);
}
inline void VectorEnum::set_val(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:EPICS.VectorEnum.val)
}
inline void VectorEnum::_internal_add_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  val_.Add(value);
}
inline void VectorEnum::add_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:EPICS.VectorEnum.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VectorEnum::_internal_val() const {
  return val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VectorEnum::val() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorEnum.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VectorEnum::_internal_mutable_val() {
  return &val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VectorEnum::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorEnum.val)
  return _internal_mutable_val();
}

// optional int32 severity = 4 [default = 0];
inline bool VectorEnum::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VectorEnum::has_severity() const {
  return _internal_has_severity();
}
inline void VectorEnum::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorEnum::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorEnum::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.severity)
  return _internal_severity();
}
inline void VectorEnum::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  severity_ = value;
}
inline void VectorEnum::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorEnum.severity)
}

// optional int32 status = 5 [default = 0];
inline bool VectorEnum::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VectorEnum::has_status() const {
  return _internal_has_status();
}
inline void VectorEnum::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorEnum::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorEnum::status() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.status)
  return _internal_status();
}
inline void VectorEnum::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void VectorEnum::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorEnum.status)
}

// optional uint32 repeatcount = 6;
inline bool VectorEnum::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VectorEnum::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void VectorEnum::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorEnum::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorEnum::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.repeatcount)
  return _internal_repeatcount();
}
inline void VectorEnum::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  repeatcount_ = value;
}
inline void VectorEnum::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorEnum.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorEnum::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int VectorEnum::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void VectorEnum::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* VectorEnum::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorEnum.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
VectorEnum::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorEnum.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& VectorEnum::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& VectorEnum::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* VectorEnum::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* VectorEnum::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.VectorEnum.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
VectorEnum::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorEnum.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorEnum::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VectorEnum::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void VectorEnum::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VectorEnum::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool VectorEnum::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorEnum.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void VectorEnum::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fieldactualchange_ = value;
}
inline void VectorEnum::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorEnum.fieldactualchange)
}

// -------------------------------------------------------------------

// VectorFloat

// required uint32 secondsintoyear = 1;
inline bool VectorFloat::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorFloat::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void VectorFloat::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorFloat::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorFloat::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void VectorFloat::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void VectorFloat::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorFloat.secondsintoyear)
}

// required uint32 nano = 2;
inline bool VectorFloat::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorFloat::has_nano() const {
  return _internal_has_nano();
}
inline void VectorFloat::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorFloat::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorFloat::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.nano)
  return _internal_nano();
}
inline void VectorFloat::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void VectorFloat::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorFloat.nano)
}

// repeated float val = 3 [packed = true];
inline int VectorFloat::_internal_val_size() const {
  return val_.size();
}
inline int VectorFloat::val_size() const {
  return _internal_val_size();
}
inline void VectorFloat::clear_val() {
  val_.Clear();
}
inline float VectorFloat::_internal_val(int index) const {
  return val_.Get(index);
}
inline float VectorFloat::val(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.val)
  return _internal_val(index);
}
inline void VectorFloat::set_val(int index, float value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:EPICS.VectorFloat.val)
}
inline void VectorFloat::_internal_add_val(float value) {
  val_.Add(value);
}
inline void VectorFloat::add_val(float value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:EPICS.VectorFloat.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorFloat::_internal_val() const {
  return val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
VectorFloat::val() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorFloat.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorFloat::_internal_mutable_val() {
  return &val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
VectorFloat::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorFloat.val)
  return _internal_mutable_val();
}

// optional int32 severity = 4 [default = 0];
inline bool VectorFloat::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VectorFloat::has_severity() const {
  return _internal_has_severity();
}
inline void VectorFloat::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorFloat::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorFloat::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.severity)
  return _internal_severity();
}
inline void VectorFloat::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  severity_ = value;
}
inline void VectorFloat::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorFloat.severity)
}

// optional int32 status = 5 [default = 0];
inline bool VectorFloat::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VectorFloat::has_status() const {
  return _internal_has_status();
}
inline void VectorFloat::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorFloat::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorFloat::status() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.status)
  return _internal_status();
}
inline void VectorFloat::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void VectorFloat::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorFloat.status)
}

// optional uint32 repeatcount = 6;
inline bool VectorFloat::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VectorFloat::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void VectorFloat::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorFloat::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorFloat::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.repeatcount)
  return _internal_repeatcount();
}
inline void VectorFloat::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  repeatcount_ = value;
}
inline void VectorFloat::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorFloat.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorFloat::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int VectorFloat::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void VectorFloat::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* VectorFloat::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorFloat.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
VectorFloat::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorFloat.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& VectorFloat::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& VectorFloat::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* VectorFloat::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* VectorFloat::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.VectorFloat.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
VectorFloat::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorFloat.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorFloat::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VectorFloat::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void VectorFloat::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VectorFloat::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool VectorFloat::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorFloat.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void VectorFloat::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fieldactualchange_ = value;
}
inline void VectorFloat::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorFloat.fieldactualchange)
}

// -------------------------------------------------------------------

// VectorDouble

// required uint32 secondsintoyear = 1;
inline bool VectorDouble::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VectorDouble::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void VectorDouble::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorDouble::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorDouble::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void VectorDouble::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  secondsintoyear_ = value;
}
inline void VectorDouble::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorDouble.secondsintoyear)
}

// required uint32 nano = 2;
inline bool VectorDouble::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VectorDouble::has_nano() const {
  return _internal_has_nano();
}
inline void VectorDouble::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorDouble::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorDouble::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.nano)
  return _internal_nano();
}
inline void VectorDouble::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nano_ = value;
}
inline void VectorDouble::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorDouble.nano)
}

// repeated double val = 3 [packed = true];
inline int VectorDouble::_internal_val_size() const {
  return val_.size();
}
inline int VectorDouble::val_size() const {
  return _internal_val_size();
}
inline void VectorDouble::clear_val() {
  val_.Clear();
}
inline double VectorDouble::_internal_val(int index) const {
  return val_.Get(index);
}
inline double VectorDouble::val(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.val)
  return _internal_val(index);
}
inline void VectorDouble::set_val(int index, double value) {
  val_.Set(index, value);
  // @@protoc_insertion_point(field_set:EPICS.VectorDouble.val)
}
inline void VectorDouble::_internal_add_val(double value) {
  val_.Add(value);
}
inline void VectorDouble::add_val(double value) {
  _internal_add_val(value);
  // @@protoc_insertion_point(field_add:EPICS.VectorDouble.val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorDouble::_internal_val() const {
  return val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >&
VectorDouble::val() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorDouble.val)
  return _internal_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorDouble::_internal_mutable_val() {
  return &val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< double >*
VectorDouble::mutable_val() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorDouble.val)
  return _internal_mutable_val();
}

// optional int32 severity = 4 [default = 0];
inline bool VectorDouble::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VectorDouble::has_severity() const {
  return _internal_has_severity();
}
inline void VectorDouble::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorDouble::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorDouble::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.severity)
  return _internal_severity();
}
inline void VectorDouble::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  severity_ = value;
}
inline void VectorDouble::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorDouble.severity)
}

// optional int32 status = 5 [default = 0];
inline bool VectorDouble::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VectorDouble::has_status() const {
  return _internal_has_status();
}
inline void VectorDouble::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorDouble::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VectorDouble::status() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.status)
  return _internal_status();
}
inline void VectorDouble::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void VectorDouble::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorDouble.status)
}

// optional uint32 repeatcount = 6;
inline bool VectorDouble::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VectorDouble::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void VectorDouble::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorDouble::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VectorDouble::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.repeatcount)
  return _internal_repeatcount();
}
inline void VectorDouble::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  repeatcount_ = value;
}
inline void VectorDouble::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorDouble.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int VectorDouble::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int VectorDouble::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void VectorDouble::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* VectorDouble::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.VectorDouble.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
VectorDouble::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.VectorDouble.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& VectorDouble::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& VectorDouble::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* VectorDouble::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* VectorDouble::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.VectorDouble.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
VectorDouble::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.VectorDouble.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool VectorDouble::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VectorDouble::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void VectorDouble::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000020u;
}
inline bool VectorDouble::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool VectorDouble::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.VectorDouble.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void VectorDouble::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000020u;
  fieldactualchange_ = value;
}
inline void VectorDouble::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.VectorDouble.fieldactualchange)
}

// -------------------------------------------------------------------

// V4GenericBytes

// required uint32 secondsintoyear = 1;
inline bool V4GenericBytes::_internal_has_secondsintoyear() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool V4GenericBytes::has_secondsintoyear() const {
  return _internal_has_secondsintoyear();
}
inline void V4GenericBytes::clear_secondsintoyear() {
  secondsintoyear_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::_internal_secondsintoyear() const {
  return secondsintoyear_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::secondsintoyear() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.secondsintoyear)
  return _internal_secondsintoyear();
}
inline void V4GenericBytes::_internal_set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  secondsintoyear_ = value;
}
inline void V4GenericBytes::set_secondsintoyear(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_secondsintoyear(value);
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.secondsintoyear)
}

// required uint32 nano = 2;
inline bool V4GenericBytes::_internal_has_nano() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool V4GenericBytes::has_nano() const {
  return _internal_has_nano();
}
inline void V4GenericBytes::clear_nano() {
  nano_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::_internal_nano() const {
  return nano_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::nano() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.nano)
  return _internal_nano();
}
inline void V4GenericBytes::_internal_set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nano_ = value;
}
inline void V4GenericBytes::set_nano(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nano(value);
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.nano)
}

// required bytes val = 3;
inline bool V4GenericBytes::_internal_has_val() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool V4GenericBytes::has_val() const {
  return _internal_has_val();
}
inline void V4GenericBytes::clear_val() {
  val_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& V4GenericBytes::val() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.val)
  return _internal_val();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void V4GenericBytes::set_val(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 val_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.val)
}
inline std::string* V4GenericBytes::mutable_val() {
  // @@protoc_insertion_point(field_mutable:EPICS.V4GenericBytes.val)
  return _internal_mutable_val();
}
inline const std::string& V4GenericBytes::_internal_val() const {
  return val_.Get();
}
inline void V4GenericBytes::_internal_set_val(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  val_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* V4GenericBytes::_internal_mutable_val() {
  _has_bits_[0] |= 0x00000001u;
  return val_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* V4GenericBytes::release_val() {
  // @@protoc_insertion_point(field_release:EPICS.V4GenericBytes.val)
  if (!_internal_has_val()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return val_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void V4GenericBytes::set_allocated_val(std::string* val) {
  if (val != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  val_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), val,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.V4GenericBytes.val)
}

// optional int32 severity = 4 [default = 0];
inline bool V4GenericBytes::_internal_has_severity() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool V4GenericBytes::has_severity() const {
  return _internal_has_severity();
}
inline void V4GenericBytes::clear_severity() {
  severity_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V4GenericBytes::_internal_severity() const {
  return severity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V4GenericBytes::severity() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.severity)
  return _internal_severity();
}
inline void V4GenericBytes::_internal_set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  severity_ = value;
}
inline void V4GenericBytes::set_severity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_severity(value);
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.severity)
}

// optional int32 status = 5 [default = 0];
inline bool V4GenericBytes::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool V4GenericBytes::has_status() const {
  return _internal_has_status();
}
inline void V4GenericBytes::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V4GenericBytes::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 V4GenericBytes::status() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.status)
  return _internal_status();
}
inline void V4GenericBytes::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void V4GenericBytes::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.status)
}

// optional uint32 repeatcount = 6;
inline bool V4GenericBytes::_internal_has_repeatcount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool V4GenericBytes::has_repeatcount() const {
  return _internal_has_repeatcount();
}
inline void V4GenericBytes::clear_repeatcount() {
  repeatcount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::_internal_repeatcount() const {
  return repeatcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::repeatcount() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.repeatcount)
  return _internal_repeatcount();
}
inline void V4GenericBytes::_internal_set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  repeatcount_ = value;
}
inline void V4GenericBytes::set_repeatcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_repeatcount(value);
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.repeatcount)
}

// repeated .EPICS.FieldValue fieldvalues = 7;
inline int V4GenericBytes::_internal_fieldvalues_size() const {
  return fieldvalues_.size();
}
inline int V4GenericBytes::fieldvalues_size() const {
  return _internal_fieldvalues_size();
}
inline void V4GenericBytes::clear_fieldvalues() {
  fieldvalues_.Clear();
}
inline ::EPICS::FieldValue* V4GenericBytes::mutable_fieldvalues(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.V4GenericBytes.fieldvalues)
  return fieldvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
V4GenericBytes::mutable_fieldvalues() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.V4GenericBytes.fieldvalues)
  return &fieldvalues_;
}
inline const ::EPICS::FieldValue& V4GenericBytes::_internal_fieldvalues(int index) const {
  return fieldvalues_.Get(index);
}
inline const ::EPICS::FieldValue& V4GenericBytes::fieldvalues(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.fieldvalues)
  return _internal_fieldvalues(index);
}
inline ::EPICS::FieldValue* V4GenericBytes::_internal_add_fieldvalues() {
  return fieldvalues_.Add();
}
inline ::EPICS::FieldValue* V4GenericBytes::add_fieldvalues() {
  // @@protoc_insertion_point(field_add:EPICS.V4GenericBytes.fieldvalues)
  return _internal_add_fieldvalues();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
V4GenericBytes::fieldvalues() const {
  // @@protoc_insertion_point(field_list:EPICS.V4GenericBytes.fieldvalues)
  return fieldvalues_;
}

// optional bool fieldactualchange = 8;
inline bool V4GenericBytes::_internal_has_fieldactualchange() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool V4GenericBytes::has_fieldactualchange() const {
  return _internal_has_fieldactualchange();
}
inline void V4GenericBytes::clear_fieldactualchange() {
  fieldactualchange_ = false;
  _has_bits_[0] &= ~0x00000040u;
}
inline bool V4GenericBytes::_internal_fieldactualchange() const {
  return fieldactualchange_;
}
inline bool V4GenericBytes::fieldactualchange() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.fieldactualchange)
  return _internal_fieldactualchange();
}
inline void V4GenericBytes::_internal_set_fieldactualchange(bool value) {
  _has_bits_[0] |= 0x00000040u;
  fieldactualchange_ = value;
}
inline void V4GenericBytes::set_fieldactualchange(bool value) {
  _internal_set_fieldactualchange(value);
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.fieldactualchange)
}

// optional uint32 userTag = 9;
inline bool V4GenericBytes::_internal_has_usertag() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool V4GenericBytes::has_usertag() const {
  return _internal_has_usertag();
}
inline void V4GenericBytes::clear_usertag() {
  usertag_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::_internal_usertag() const {
  return usertag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 V4GenericBytes::usertag() const {
  // @@protoc_insertion_point(field_get:EPICS.V4GenericBytes.userTag)
  return _internal_usertag();
}
inline void V4GenericBytes::_internal_set_usertag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  usertag_ = value;
}
inline void V4GenericBytes::set_usertag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_usertag(value);
  // @@protoc_insertion_point(field_set:EPICS.V4GenericBytes.userTag)
}

// -------------------------------------------------------------------

// PayloadInfo

// required .EPICS.PayloadType type = 1;
inline bool PayloadInfo::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PayloadInfo::has_type() const {
  return _internal_has_type();
}
inline void PayloadInfo::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::EPICS::PayloadType PayloadInfo::_internal_type() const {
  return static_cast< ::EPICS::PayloadType >(type_);
}
inline ::EPICS::PayloadType PayloadInfo::type() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.type)
  return _internal_type();
}
inline void PayloadInfo::_internal_set_type(::EPICS::PayloadType value) {
  assert(::EPICS::PayloadType_IsValid(value));
  _has_bits_[0] |= 0x00000004u;
  type_ = value;
}
inline void PayloadInfo::set_type(::EPICS::PayloadType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.type)
}

// required string pvname = 2;
inline bool PayloadInfo::_internal_has_pvname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PayloadInfo::has_pvname() const {
  return _internal_has_pvname();
}
inline void PayloadInfo::clear_pvname() {
  pvname_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PayloadInfo::pvname() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.pvname)
  return _internal_pvname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayloadInfo::set_pvname(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 pvname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.pvname)
}
inline std::string* PayloadInfo::mutable_pvname() {
  // @@protoc_insertion_point(field_mutable:EPICS.PayloadInfo.pvname)
  return _internal_mutable_pvname();
}
inline const std::string& PayloadInfo::_internal_pvname() const {
  return pvname_.Get();
}
inline void PayloadInfo::_internal_set_pvname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  pvname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayloadInfo::_internal_mutable_pvname() {
  _has_bits_[0] |= 0x00000001u;
  return pvname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayloadInfo::release_pvname() {
  // @@protoc_insertion_point(field_release:EPICS.PayloadInfo.pvname)
  if (!_internal_has_pvname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return pvname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayloadInfo::set_allocated_pvname(std::string* pvname) {
  if (pvname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  pvname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pvname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.PayloadInfo.pvname)
}

// required int32 year = 3;
inline bool PayloadInfo::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PayloadInfo::has_year() const {
  return _internal_has_year();
}
inline void PayloadInfo::clear_year() {
  year_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayloadInfo::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayloadInfo::year() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.year)
  return _internal_year();
}
inline void PayloadInfo::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  year_ = value;
}
inline void PayloadInfo::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.year)
}

// optional int32 elementCount = 4;
inline bool PayloadInfo::_internal_has_elementcount() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PayloadInfo::has_elementcount() const {
  return _internal_has_elementcount();
}
inline void PayloadInfo::clear_elementcount() {
  elementcount_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayloadInfo::_internal_elementcount() const {
  return elementcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PayloadInfo::elementcount() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.elementCount)
  return _internal_elementcount();
}
inline void PayloadInfo::_internal_set_elementcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  elementcount_ = value;
}
inline void PayloadInfo::set_elementcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_elementcount(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.elementCount)
}

// optional double unused00 = 5;
inline bool PayloadInfo::_internal_has_unused00() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused00() const {
  return _internal_has_unused00();
}
inline void PayloadInfo::clear_unused00() {
  unused00_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double PayloadInfo::_internal_unused00() const {
  return unused00_;
}
inline double PayloadInfo::unused00() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused00)
  return _internal_unused00();
}
inline void PayloadInfo::_internal_set_unused00(double value) {
  _has_bits_[0] |= 0x00000010u;
  unused00_ = value;
}
inline void PayloadInfo::set_unused00(double value) {
  _internal_set_unused00(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused00)
}

// optional double unused01 = 6;
inline bool PayloadInfo::_internal_has_unused01() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused01() const {
  return _internal_has_unused01();
}
inline void PayloadInfo::clear_unused01() {
  unused01_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double PayloadInfo::_internal_unused01() const {
  return unused01_;
}
inline double PayloadInfo::unused01() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused01)
  return _internal_unused01();
}
inline void PayloadInfo::_internal_set_unused01(double value) {
  _has_bits_[0] |= 0x00000020u;
  unused01_ = value;
}
inline void PayloadInfo::set_unused01(double value) {
  _internal_set_unused01(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused01)
}

// optional double unused02 = 7;
inline bool PayloadInfo::_internal_has_unused02() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused02() const {
  return _internal_has_unused02();
}
inline void PayloadInfo::clear_unused02() {
  unused02_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double PayloadInfo::_internal_unused02() const {
  return unused02_;
}
inline double PayloadInfo::unused02() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused02)
  return _internal_unused02();
}
inline void PayloadInfo::_internal_set_unused02(double value) {
  _has_bits_[0] |= 0x00000040u;
  unused02_ = value;
}
inline void PayloadInfo::set_unused02(double value) {
  _internal_set_unused02(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused02)
}

// optional double unused03 = 8;
inline bool PayloadInfo::_internal_has_unused03() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused03() const {
  return _internal_has_unused03();
}
inline void PayloadInfo::clear_unused03() {
  unused03_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double PayloadInfo::_internal_unused03() const {
  return unused03_;
}
inline double PayloadInfo::unused03() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused03)
  return _internal_unused03();
}
inline void PayloadInfo::_internal_set_unused03(double value) {
  _has_bits_[0] |= 0x00000080u;
  unused03_ = value;
}
inline void PayloadInfo::set_unused03(double value) {
  _internal_set_unused03(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused03)
}

// optional double unused04 = 9;
inline bool PayloadInfo::_internal_has_unused04() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused04() const {
  return _internal_has_unused04();
}
inline void PayloadInfo::clear_unused04() {
  unused04_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PayloadInfo::_internal_unused04() const {
  return unused04_;
}
inline double PayloadInfo::unused04() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused04)
  return _internal_unused04();
}
inline void PayloadInfo::_internal_set_unused04(double value) {
  _has_bits_[0] |= 0x00000100u;
  unused04_ = value;
}
inline void PayloadInfo::set_unused04(double value) {
  _internal_set_unused04(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused04)
}

// optional double unused05 = 10;
inline bool PayloadInfo::_internal_has_unused05() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused05() const {
  return _internal_has_unused05();
}
inline void PayloadInfo::clear_unused05() {
  unused05_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double PayloadInfo::_internal_unused05() const {
  return unused05_;
}
inline double PayloadInfo::unused05() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused05)
  return _internal_unused05();
}
inline void PayloadInfo::_internal_set_unused05(double value) {
  _has_bits_[0] |= 0x00000200u;
  unused05_ = value;
}
inline void PayloadInfo::set_unused05(double value) {
  _internal_set_unused05(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused05)
}

// optional double unused06 = 11;
inline bool PayloadInfo::_internal_has_unused06() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused06() const {
  return _internal_has_unused06();
}
inline void PayloadInfo::clear_unused06() {
  unused06_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double PayloadInfo::_internal_unused06() const {
  return unused06_;
}
inline double PayloadInfo::unused06() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused06)
  return _internal_unused06();
}
inline void PayloadInfo::_internal_set_unused06(double value) {
  _has_bits_[0] |= 0x00000400u;
  unused06_ = value;
}
inline void PayloadInfo::set_unused06(double value) {
  _internal_set_unused06(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused06)
}

// optional double unused07 = 12;
inline bool PayloadInfo::_internal_has_unused07() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused07() const {
  return _internal_has_unused07();
}
inline void PayloadInfo::clear_unused07() {
  unused07_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double PayloadInfo::_internal_unused07() const {
  return unused07_;
}
inline double PayloadInfo::unused07() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused07)
  return _internal_unused07();
}
inline void PayloadInfo::_internal_set_unused07(double value) {
  _has_bits_[0] |= 0x00000800u;
  unused07_ = value;
}
inline void PayloadInfo::set_unused07(double value) {
  _internal_set_unused07(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused07)
}

// optional double unused08 = 13;
inline bool PayloadInfo::_internal_has_unused08() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused08() const {
  return _internal_has_unused08();
}
inline void PayloadInfo::clear_unused08() {
  unused08_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline double PayloadInfo::_internal_unused08() const {
  return unused08_;
}
inline double PayloadInfo::unused08() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused08)
  return _internal_unused08();
}
inline void PayloadInfo::_internal_set_unused08(double value) {
  _has_bits_[0] |= 0x00001000u;
  unused08_ = value;
}
inline void PayloadInfo::set_unused08(double value) {
  _internal_set_unused08(value);
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused08)
}

// optional string unused09 = 14;
inline bool PayloadInfo::_internal_has_unused09() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PayloadInfo::has_unused09() const {
  return _internal_has_unused09();
}
inline void PayloadInfo::clear_unused09() {
  unused09_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PayloadInfo::unused09() const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.unused09)
  return _internal_unused09();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PayloadInfo::set_unused09(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000002u;
 unused09_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:EPICS.PayloadInfo.unused09)
}
inline std::string* PayloadInfo::mutable_unused09() {
  // @@protoc_insertion_point(field_mutable:EPICS.PayloadInfo.unused09)
  return _internal_mutable_unused09();
}
inline const std::string& PayloadInfo::_internal_unused09() const {
  return unused09_.Get();
}
inline void PayloadInfo::_internal_set_unused09(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  unused09_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PayloadInfo::_internal_mutable_unused09() {
  _has_bits_[0] |= 0x00000002u;
  return unused09_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PayloadInfo::release_unused09() {
  // @@protoc_insertion_point(field_release:EPICS.PayloadInfo.unused09)
  if (!_internal_has_unused09()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return unused09_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PayloadInfo::set_allocated_unused09(std::string* unused09) {
  if (unused09 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  unused09_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), unused09,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:EPICS.PayloadInfo.unused09)
}

// repeated .EPICS.FieldValue headers = 15;
inline int PayloadInfo::_internal_headers_size() const {
  return headers_.size();
}
inline int PayloadInfo::headers_size() const {
  return _internal_headers_size();
}
inline void PayloadInfo::clear_headers() {
  headers_.Clear();
}
inline ::EPICS::FieldValue* PayloadInfo::mutable_headers(int index) {
  // @@protoc_insertion_point(field_mutable:EPICS.PayloadInfo.headers)
  return headers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >*
PayloadInfo::mutable_headers() {
  // @@protoc_insertion_point(field_mutable_list:EPICS.PayloadInfo.headers)
  return &headers_;
}
inline const ::EPICS::FieldValue& PayloadInfo::_internal_headers(int index) const {
  return headers_.Get(index);
}
inline const ::EPICS::FieldValue& PayloadInfo::headers(int index) const {
  // @@protoc_insertion_point(field_get:EPICS.PayloadInfo.headers)
  return _internal_headers(index);
}
inline ::EPICS::FieldValue* PayloadInfo::_internal_add_headers() {
  return headers_.Add();
}
inline ::EPICS::FieldValue* PayloadInfo::add_headers() {
  // @@protoc_insertion_point(field_add:EPICS.PayloadInfo.headers)
  return _internal_add_headers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::EPICS::FieldValue >&
PayloadInfo::headers() const {
  // @@protoc_insertion_point(field_list:EPICS.PayloadInfo.headers)
  return headers_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace EPICS

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::EPICS::PayloadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EPICS::PayloadType>() {
  return ::EPICS::PayloadType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_epics_5fevent_2eproto
